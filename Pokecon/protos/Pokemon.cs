// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pokemon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from pokemon.proto</summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class PokemonReflection {

  #region Descriptor
  /// <summary>File descriptor for pokemon.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PokemonReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1wb2tlbW9uLnByb3RvIsIGCg5SZXF1ZXN0RW52ZWxvcBIQCgh1bmtub3du",
          "MRgBIAEoBRIOCgZycGNfaWQYAyABKAMSKgoIcmVxdWVzdHMYBCADKAsyGC5S",
          "ZXF1ZXN0RW52ZWxvcC5SZXF1ZXN0cxIqCgh1bmtub3duNhgGIAEoCzIYLlJl",
          "cXVlc3RFbnZlbG9wLlVua25vd242EhAKCGxhdGl0dWRlGAcgASgGEhEKCWxv",
          "bmdpdHVkZRgIIAEoBhIQCghhbHRpdHVkZRgJIAEoBhImCgRhdXRoGAogASgL",
          "MhguUmVxdWVzdEVudmVsb3AuQXV0aEluZm8SHwoJdW5rbm93bjExGAsgASgL",
          "MgwuVW5rbm93bkF1dGgSEQoJdW5rbm93bjEyGAwgASgDGikKCFJlcXVlc3Rz",
          "EgwKBHR5cGUYASABKAUSDwoHbWVzc2FnZRgCIAEoDBohChNNZXNzYWdlU2lu",
          "Z2xlU3RyaW5nEgoKAmYxGAEgASgJGh4KEE1lc3NhZ2VTaW5nbGVJbnQSCgoC",
          "ZjEYASABKAMaKAoOTWVzc2FnZVR3b0ludHMSCgoCZjEYASABKAMSCgoCZjUY",
          "BSABKAMaQAoLTWVzc2FnZVF1YWQSCgoCZjEYASABKAwSCgoCZjIYAiABKAwS",
          "CwoDbGF0GAMgASgQEgwKBGxvbmcYBCABKBAaFgoDV2F0Eg8KBGxvbHMYgICA",
          "QCADKAMaSQoIVW5rbm93bjMSEAoIdW5rbm93bjQYASABKAkSEAoIdW5rbm93",
          "bjIYAiABKAwSCwoDbGF0GAMgASgGEgwKBGxvbmcYBCABKAYabwoIVW5rbm93",
          "bjYSEAoIdW5rbm93bjEYASABKAUSMwoIdW5rbm93bjIYAiABKAsyIS5SZXF1",
          "ZXN0RW52ZWxvcC5Vbmtub3duNi5Vbmtub3duMhocCghVbmtub3duMhIQCgh1",
          "bmtub3duMRgBIAEoDBp1CghBdXRoSW5mbxIQCghwcm92aWRlchgBIAEoCRIr",
          "CgV0b2tlbhgCIAEoCzIcLlJlcXVlc3RFbnZlbG9wLkF1dGhJbmZvLkpXVBoq",
          "CgNKV1QSEAoIY29udGVudHMYASABKAkSEQoJdW5rbm93bjEzGAIgASgFIkYK",
          "C1Vua25vd25BdXRoEhEKCXVua25vd243MRgBIAEoDBIRCgl1bmtub3duNzIY",
          "AiABKAMSEQoJdW5rbm93bjczGAMgASgMIjYKB1BheWxvYWQSEAoIdW5rbm93",
          "bjEYASABKAUSGQoHcHJvZmlsZRgCIAEoCzIILlByb2ZpbGUiiAMKB1Byb2Zp",
          "bGUSFQoNY3JlYXRpb25fdGltZRgBIAEoAxIQCgh1c2VybmFtZRgCIAEoCRIM",
          "CgR0ZWFtGAUgASgFEhAKCHR1dG9yaWFsGAcgASgMEiYKBmF2YXRhchgIIAEo",
          "CzIWLlByb2ZpbGUuQXZhdGFyRGV0YWlscxIUCgxwb2tlX3N0b3JhZ2UYCSAB",
          "KAUSFAoMaXRlbV9zdG9yYWdlGAogASgFEhEKCXVua25vd24xMRgLIAEoCRIR",
          "Cgl1bmtub3duMTIYDCABKAkSEQoJdW5rbm93bjEzGA0gASgJEiMKCGN1cnJl",
          "bmN5GA4gAygLMhEuUHJvZmlsZS5DdXJyZW5jeRpYCg1BdmF0YXJEZXRhaWxz",
          "EhAKCHVua25vd24yGAIgASgFEhAKCHVua25vd24zGAMgASgFEhAKCHVua25v",
          "d245GAkgASgFEhEKCXVua25vd24xMBgKIAEoBRooCghDdXJyZW5jeRIMCgR0",
          "eXBlGAEgASgJEg4KBmFtb3VudBgCIAEoBSK2EwoPUmVzcG9uc2VFbnZlbG9w",
          "EhAKCHVua25vd24xGAEgASgFEhAKCHVua25vd24yGAIgASgDEg8KB2FwaV91",
          "cmwYAyABKAkSKwoIdW5rbm93bjYYBiABKAsyGS5SZXNwb25zZUVudmVsb3Au",
          "VW5rbm93bjYSHgoIdW5rbm93bjcYByABKAsyDC5Vbmtub3duQXV0aBIZCgdw",
          "YXlsb2FkGGQgAygLMgguUGF5bG9hZBpwCghVbmtub3duNhIQCgh1bmtub3du",
          "MRgBIAEoBRI0Cgh1bmtub3duMhgCIAEoCzIiLlJlc3BvbnNlRW52ZWxvcC5V",
          "bmtub3duNi5Vbmtub3duMhocCghVbmtub3duMhIQCgh1bmtub3duMRgBIAEo",
          "DBpBChBIZWFydGJlYXRQYXlsb2FkEi0KBWNlbGxzGAEgAygLMh4uUmVzcG9u",
          "c2VFbnZlbG9wLkNsaWVudE1hcENlbGwa6QMKDUNsaWVudE1hcENlbGwSEAoI",
          "UzJDZWxsSWQYASABKAQSEgoKQXNPZlRpbWVNcxgCIAEoAxIvCgRGb3J0GAMg",
          "AygLMiEuUmVzcG9uc2VFbnZlbG9wLlBva2Vtb25Gb3J0UHJvdG8SOgoKU3Bh",
          "d25Qb2ludBgEIAMoCzImLlJlc3BvbnNlRW52ZWxvcC5DbGllbnRTcGF3blBv",
          "aW50UHJvdG8SNgoLV2lsZFBva2Vtb24YBSADKAsyIS5SZXNwb25zZUVudmVs",
          "b3AuV2lsZFBva2Vtb25Qcm90bxIXCg9Jc1RydW5jYXRlZExpc3QYByABKAgS",
          "PQoLRm9ydFN1bW1hcnkYCCADKAsyKC5SZXNwb25zZUVudmVsb3AuUG9rZW1v",
          "blN1bW1hcnlGb3J0UHJvdG8SQwoTRGVjaW1hdGVkU3Bhd25Qb2ludBgJIAMo",
          "CzImLlJlc3BvbnNlRW52ZWxvcC5DbGllbnRTcGF3blBvaW50UHJvdG8SNAoK",
          "TWFwUG9rZW1vbhgKIAMoCzIgLlJlc3BvbnNlRW52ZWxvcC5NYXBQb2tlbW9u",
          "UHJvdG8SOgoNTmVhcmJ5UG9rZW1vbhgLIAMoCzIjLlJlc3BvbnNlRW52ZWxv",
          "cC5OZWFyYnlQb2tlbW9uUHJvdG8aaAoLV2lsZFBva2Vtb24SEAoIVW5pcXVl",
          "SWQYASABKAkSEQoJUG9rZW1vbklkGAIgASgJEjQKB3Bva2Vtb24YCyADKAsy",
          "Iy5SZXNwb25zZUVudmVsb3AuTmVhcmJ5UG9rZW1vblByb3RvGpIBCg9NYXBQ",
          "b2tlbW9uUHJvdG8SFAoMU3Bhd25wb2ludElkGAEgASgJEhMKC0VuY291bnRl",
          "cklkGAIgASgEEhUKDVBva2VkZXhUeXBlSWQYAyABKAUSGAoQRXhwaXJhdGlv",
          "blRpbWVNcxgEIAEoAxIQCghMYXRpdHVkZRgFIAEoARIRCglMb25naXR1ZGUY",
          "BiABKAEa5wIKEFBva2Vtb25Gb3J0UHJvdG8SDgoGRm9ydElkGAEgASgJEhYK",
          "Dkxhc3RNb2RpZmllZE1zGAIgASgDEhAKCExhdGl0dWRlGAMgASgBEhEKCUxv",
          "bmdpdHVkZRgEIAEoARIMCgRUZWFtGAUgASgFEhYKDkd1YXJkUG9rZW1vbklk",
          "GAYgASgFEhkKEUd1YXJkUG9rZW1vbkxldmVsGAcgASgFEg8KB0VuYWJsZWQY",
          "CCABKAgSEAoIRm9ydFR5cGUYCSABKAUSEQoJR3ltUG9pbnRzGAogASgDEhIK",
          "CklzSW5CYXR0bGUYCyABKAgSNwoNQWN0aXZlUG9rZW1vbhgNIAEoCzIgLlJl",
          "c3BvbnNlRW52ZWxvcC5NYXBQb2tlbW9uUHJvdG8SGgoSQ29vbGRvd25Db21w",
          "bGV0ZU1zGA4gASgDEg8KB1Nwb25zb3IYDyABKAUSFQoNUmVuZGVyaW5nVHlw",
          "ZRgQIAEoBRptChdQb2tlbW9uU3VtbWFyeUZvcnRQcm90bxIVCg1Gb3J0U3Vt",
          "bWFyeUlkGAEgASgJEhYKDkxhc3RNb2RpZmllZE1zGAIgASgDEhAKCExhdGl0",
          "dWRlGAMgASgBEhEKCUxvbmdpdHVkZRgEIAEoARo8ChVDbGllbnRTcGF3blBv",
          "aW50UHJvdG8SEAoITGF0aXR1ZGUYAiABKAESEQoJTG9uZ2l0dWRlGAMgASgB",
          "GvoBChBXaWxkUG9rZW1vblByb3RvEhMKC0VuY291bnRlcklkGAEgASgEEhYK",
          "Dkxhc3RNb2RpZmllZE1zGAIgASgDEhAKCExhdGl0dWRlGAMgASgBEhEKCUxv",
          "bmdpdHVkZRgEIAEoARIUCgxTcGF3blBvaW50SWQYBSABKAkSOgoHcG9rZW1v",
          "bhgHIAEoCzIpLlJlc3BvbnNlRW52ZWxvcC5XaWxkUG9rZW1vblByb3RvLlBv",
          "a2Vtb24SGAoQVGltZVRpbGxIaWRkZW5NcxgLIAEoBRooCgdQb2tlbW9uEgoK",
          "AklkGAEgASgEEhEKCVBva2Vtb25JZBgCIAEoBRpYChJOZWFyYnlQb2tlbW9u",
          "UHJvdG8SFQoNUG9rZWRleE51bWJlchgBIAEoBRIWCg5EaXN0YW5jZU1ldGVy",
          "cxgCIAEoAhITCgtFbmNvdW50ZXJJZBgDIAEoBBpNCg5Qcm9maWxlUGF5bG9h",
          "ZBIQCgh1bmtub3duMRgBIAEoBRIpCgdwcm9maWxlGAIgASgLMhguUmVzcG9u",
          "c2VFbnZlbG9wLlByb2ZpbGUaqAMKB1Byb2ZpbGUSFQoNY3JlYXRpb25fdGlt",
          "ZRgBIAEoAxIQCgh1c2VybmFtZRgCIAEoCRIMCgR0ZWFtGAUgASgFEhAKCHR1",
          "dG9yaWFsGAcgASgMEjYKBmF2YXRhchgIIAEoCzImLlJlc3BvbnNlRW52ZWxv",
          "cC5Qcm9maWxlLkF2YXRhckRldGFpbHMSFAoMcG9rZV9zdG9yYWdlGAkgASgF",
          "EhQKDGl0ZW1fc3RvcmFnZRgKIAEoBRIRCgl1bmtub3duMTEYCyABKAkSEQoJ",
          "dW5rbm93bjEyGAwgASgJEhEKCXVua25vd24xMxgNIAEoCRIzCghjdXJyZW5j",
          "eRgOIAMoCzIhLlJlc3BvbnNlRW52ZWxvcC5Qcm9maWxlLkN1cnJlbmN5GlgK",
          "DUF2YXRhckRldGFpbHMSEAoIdW5rbm93bjIYAiABKAUSEAoIdW5rbm93bjMY",
          "AyABKAUSEAoIdW5rbm93bjkYCSABKAUSEQoJdW5rbm93bjEwGAogASgFGigK",
          "CEN1cnJlbmN5EgwKBHR5cGUYASABKAkSDgoGYW1vdW50GAIgASgFYgZwcm90",
          "bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop), global::RequestEnvelop.Parser, new[]{ "Unknown1", "RpcId", "Requests", "Unknown6", "Latitude", "Longitude", "Altitude", "Auth", "Unknown11", "Unknown12" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.Requests), global::RequestEnvelop.Types.Requests.Parser, new[]{ "Type", "Message" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.MessageSingleString), global::RequestEnvelop.Types.MessageSingleString.Parser, new[]{ "F1" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.MessageSingleInt), global::RequestEnvelop.Types.MessageSingleInt.Parser, new[]{ "F1" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.MessageTwoInts), global::RequestEnvelop.Types.MessageTwoInts.Parser, new[]{ "F1", "F5" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.MessageQuad), global::RequestEnvelop.Types.MessageQuad.Parser, new[]{ "F1", "F2", "Lat", "Long" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.Wat), global::RequestEnvelop.Types.Wat.Parser, new[]{ "Lols" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.Unknown3), global::RequestEnvelop.Types.Unknown3.Parser, new[]{ "Unknown4", "Unknown2", "Lat", "Long" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.Unknown6), global::RequestEnvelop.Types.Unknown6.Parser, new[]{ "Unknown1", "Unknown2" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.Unknown6.Types.Unknown2), global::RequestEnvelop.Types.Unknown6.Types.Unknown2.Parser, new[]{ "Unknown1" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.AuthInfo), global::RequestEnvelop.Types.AuthInfo.Parser, new[]{ "Provider", "Token" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::RequestEnvelop.Types.AuthInfo.Types.JWT), global::RequestEnvelop.Types.AuthInfo.Types.JWT.Parser, new[]{ "Contents", "Unknown13" }, null, null, null)})}),
          new pbr::GeneratedClrTypeInfo(typeof(global::UnknownAuth), global::UnknownAuth.Parser, new[]{ "Unknown71", "Unknown72", "Unknown73" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Payload), global::Payload.Parser, new[]{ "Unknown1", "Profile" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Profile), global::Profile.Parser, new[]{ "CreationTime", "Username", "Team", "Tutorial", "Avatar", "PokeStorage", "ItemStorage", "Unknown11", "Unknown12", "Unknown13", "Currency" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Profile.Types.AvatarDetails), global::Profile.Types.AvatarDetails.Parser, new[]{ "Unknown2", "Unknown3", "Unknown9", "Unknown10" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Profile.Types.Currency), global::Profile.Types.Currency.Parser, new[]{ "Type", "Amount" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop), global::ResponseEnvelop.Parser, new[]{ "Unknown1", "Unknown2", "ApiUrl", "Unknown6", "Unknown7", "Payload" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.Unknown6), global::ResponseEnvelop.Types.Unknown6.Parser, new[]{ "Unknown1", "Unknown2" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.Unknown6.Types.Unknown2), global::ResponseEnvelop.Types.Unknown6.Types.Unknown2.Parser, new[]{ "Unknown1" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.HeartbeatPayload), global::ResponseEnvelop.Types.HeartbeatPayload.Parser, new[]{ "Cells" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.ClientMapCell), global::ResponseEnvelop.Types.ClientMapCell.Parser, new[]{ "S2CellId", "AsOfTimeMs", "Fort", "SpawnPoint", "WildPokemon", "IsTruncatedList", "FortSummary", "DecimatedSpawnPoint", "MapPokemon", "NearbyPokemon" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.WildPokemon), global::ResponseEnvelop.Types.WildPokemon.Parser, new[]{ "UniqueId", "PokemonId", "Pokemon" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.MapPokemonProto), global::ResponseEnvelop.Types.MapPokemonProto.Parser, new[]{ "SpawnpointId", "EncounterId", "PokedexTypeId", "ExpirationTimeMs", "Latitude", "Longitude" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.PokemonFortProto), global::ResponseEnvelop.Types.PokemonFortProto.Parser, new[]{ "FortId", "LastModifiedMs", "Latitude", "Longitude", "Team", "GuardPokemonId", "GuardPokemonLevel", "Enabled", "FortType", "GymPoints", "IsInBattle", "ActivePokemon", "CooldownCompleteMs", "Sponsor", "RenderingType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.PokemonSummaryFortProto), global::ResponseEnvelop.Types.PokemonSummaryFortProto.Parser, new[]{ "FortSummaryId", "LastModifiedMs", "Latitude", "Longitude" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.ClientSpawnPointProto), global::ResponseEnvelop.Types.ClientSpawnPointProto.Parser, new[]{ "Latitude", "Longitude" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.WildPokemonProto), global::ResponseEnvelop.Types.WildPokemonProto.Parser, new[]{ "EncounterId", "LastModifiedMs", "Latitude", "Longitude", "SpawnPointId", "Pokemon", "TimeTillHiddenMs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.WildPokemonProto.Types.Pokemon), global::ResponseEnvelop.Types.WildPokemonProto.Types.Pokemon.Parser, new[]{ "Id", "PokemonId" }, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.NearbyPokemonProto), global::ResponseEnvelop.Types.NearbyPokemonProto.Parser, new[]{ "PokedexNumber", "DistanceMeters", "EncounterId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.ProfilePayload), global::ResponseEnvelop.Types.ProfilePayload.Parser, new[]{ "Unknown1", "Profile" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.Profile), global::ResponseEnvelop.Types.Profile.Parser, new[]{ "CreationTime", "Username", "Team", "Tutorial", "Avatar", "PokeStorage", "ItemStorage", "Unknown11", "Unknown12", "Unknown13", "Currency" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.Profile.Types.AvatarDetails), global::ResponseEnvelop.Types.Profile.Types.AvatarDetails.Parser, new[]{ "Unknown2", "Unknown3", "Unknown9", "Unknown10" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseEnvelop.Types.Profile.Types.Currency), global::ResponseEnvelop.Types.Profile.Types.Currency.Parser, new[]{ "Type", "Amount" }, null, null, null)})})
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RequestEnvelop : pb::IMessage<RequestEnvelop> {
  private static readonly pb::MessageParser<RequestEnvelop> _parser = new pb::MessageParser<RequestEnvelop>(() => new RequestEnvelop());
  public static pb::MessageParser<RequestEnvelop> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::PokemonReflection.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RequestEnvelop() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RequestEnvelop(RequestEnvelop other) : this() {
    unknown1_ = other.unknown1_;
    rpcId_ = other.rpcId_;
    requests_ = other.requests_.Clone();
    Unknown6 = other.unknown6_ != null ? other.Unknown6.Clone() : null;
    latitude_ = other.latitude_;
    longitude_ = other.longitude_;
    altitude_ = other.altitude_;
    Auth = other.auth_ != null ? other.Auth.Clone() : null;
    Unknown11 = other.unknown11_ != null ? other.Unknown11.Clone() : null;
    unknown12_ = other.unknown12_;
  }

  public RequestEnvelop Clone() {
    return new RequestEnvelop(this);
  }

  /// <summary>Field number for the "unknown1" field.</summary>
  public const int Unknown1FieldNumber = 1;
  private int unknown1_;
  public int Unknown1 {
    get { return unknown1_; }
    set {
      unknown1_ = value;
    }
  }

  /// <summary>Field number for the "rpc_id" field.</summary>
  public const int RpcIdFieldNumber = 3;
  private long rpcId_;
  public long RpcId {
    get { return rpcId_; }
    set {
      rpcId_ = value;
    }
  }

  /// <summary>Field number for the "requests" field.</summary>
  public const int RequestsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::RequestEnvelop.Types.Requests> _repeated_requests_codec
      = pb::FieldCodec.ForMessage(34, global::RequestEnvelop.Types.Requests.Parser);
  private readonly pbc::RepeatedField<global::RequestEnvelop.Types.Requests> requests_ = new pbc::RepeatedField<global::RequestEnvelop.Types.Requests>();
  public pbc::RepeatedField<global::RequestEnvelop.Types.Requests> Requests {
    get { return requests_; }
  }

  /// <summary>Field number for the "unknown6" field.</summary>
  public const int Unknown6FieldNumber = 6;
  private global::RequestEnvelop.Types.Unknown6 unknown6_;
  public global::RequestEnvelop.Types.Unknown6 Unknown6 {
    get { return unknown6_; }
    set {
      unknown6_ = value;
    }
  }

  /// <summary>Field number for the "latitude" field.</summary>
  public const int LatitudeFieldNumber = 7;
  private ulong latitude_;
  public ulong Latitude {
    get { return latitude_; }
    set {
      latitude_ = value;
    }
  }

  /// <summary>Field number for the "longitude" field.</summary>
  public const int LongitudeFieldNumber = 8;
  private ulong longitude_;
  public ulong Longitude {
    get { return longitude_; }
    set {
      longitude_ = value;
    }
  }

  /// <summary>Field number for the "altitude" field.</summary>
  public const int AltitudeFieldNumber = 9;
  private ulong altitude_;
  public ulong Altitude {
    get { return altitude_; }
    set {
      altitude_ = value;
    }
  }

  /// <summary>Field number for the "auth" field.</summary>
  public const int AuthFieldNumber = 10;
  private global::RequestEnvelop.Types.AuthInfo auth_;
  public global::RequestEnvelop.Types.AuthInfo Auth {
    get { return auth_; }
    set {
      auth_ = value;
    }
  }

  /// <summary>Field number for the "unknown11" field.</summary>
  public const int Unknown11FieldNumber = 11;
  private global::UnknownAuth unknown11_;
  public global::UnknownAuth Unknown11 {
    get { return unknown11_; }
    set {
      unknown11_ = value;
    }
  }

  /// <summary>Field number for the "unknown12" field.</summary>
  public const int Unknown12FieldNumber = 12;
  private long unknown12_;
  public long Unknown12 {
    get { return unknown12_; }
    set {
      unknown12_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RequestEnvelop);
  }

  public bool Equals(RequestEnvelop other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Unknown1 != other.Unknown1) return false;
    if (RpcId != other.RpcId) return false;
    if(!requests_.Equals(other.requests_)) return false;
    if (!object.Equals(Unknown6, other.Unknown6)) return false;
    if (Latitude != other.Latitude) return false;
    if (Longitude != other.Longitude) return false;
    if (Altitude != other.Altitude) return false;
    if (!object.Equals(Auth, other.Auth)) return false;
    if (!object.Equals(Unknown11, other.Unknown11)) return false;
    if (Unknown12 != other.Unknown12) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Unknown1 != 0) hash ^= Unknown1.GetHashCode();
    if (RpcId != 0L) hash ^= RpcId.GetHashCode();
    hash ^= requests_.GetHashCode();
    if (unknown6_ != null) hash ^= Unknown6.GetHashCode();
    if (Latitude != 0UL) hash ^= Latitude.GetHashCode();
    if (Longitude != 0UL) hash ^= Longitude.GetHashCode();
    if (Altitude != 0UL) hash ^= Altitude.GetHashCode();
    if (auth_ != null) hash ^= Auth.GetHashCode();
    if (unknown11_ != null) hash ^= Unknown11.GetHashCode();
    if (Unknown12 != 0L) hash ^= Unknown12.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Unknown1 != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Unknown1);
    }
    if (RpcId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(RpcId);
    }
    requests_.WriteTo(output, _repeated_requests_codec);
    if (unknown6_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Unknown6);
    }
    if (Latitude != 0UL) {
      output.WriteRawTag(57);
      output.WriteFixed64(Latitude);
    }
    if (Longitude != 0UL) {
      output.WriteRawTag(65);
      output.WriteFixed64(Longitude);
    }
    if (Altitude != 0UL) {
      output.WriteRawTag(73);
      output.WriteFixed64(Altitude);
    }
    if (auth_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(Auth);
    }
    if (unknown11_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(Unknown11);
    }
    if (Unknown12 != 0L) {
      output.WriteRawTag(96);
      output.WriteInt64(Unknown12);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Unknown1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown1);
    }
    if (RpcId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RpcId);
    }
    size += requests_.CalculateSize(_repeated_requests_codec);
    if (unknown6_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unknown6);
    }
    if (Latitude != 0UL) {
      size += 1 + 8;
    }
    if (Longitude != 0UL) {
      size += 1 + 8;
    }
    if (Altitude != 0UL) {
      size += 1 + 8;
    }
    if (auth_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Auth);
    }
    if (unknown11_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unknown11);
    }
    if (Unknown12 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Unknown12);
    }
    return size;
  }

  public void MergeFrom(RequestEnvelop other) {
    if (other == null) {
      return;
    }
    if (other.Unknown1 != 0) {
      Unknown1 = other.Unknown1;
    }
    if (other.RpcId != 0L) {
      RpcId = other.RpcId;
    }
    requests_.Add(other.requests_);
    if (other.unknown6_ != null) {
      if (unknown6_ == null) {
        unknown6_ = new global::RequestEnvelop.Types.Unknown6();
      }
      Unknown6.MergeFrom(other.Unknown6);
    }
    if (other.Latitude != 0UL) {
      Latitude = other.Latitude;
    }
    if (other.Longitude != 0UL) {
      Longitude = other.Longitude;
    }
    if (other.Altitude != 0UL) {
      Altitude = other.Altitude;
    }
    if (other.auth_ != null) {
      if (auth_ == null) {
        auth_ = new global::RequestEnvelop.Types.AuthInfo();
      }
      Auth.MergeFrom(other.Auth);
    }
    if (other.unknown11_ != null) {
      if (unknown11_ == null) {
        unknown11_ = new global::UnknownAuth();
      }
      Unknown11.MergeFrom(other.Unknown11);
    }
    if (other.Unknown12 != 0L) {
      Unknown12 = other.Unknown12;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Unknown1 = input.ReadInt32();
          break;
        }
        case 24: {
          RpcId = input.ReadInt64();
          break;
        }
        case 34: {
          requests_.AddEntriesFrom(input, _repeated_requests_codec);
          break;
        }
        case 50: {
          if (unknown6_ == null) {
            unknown6_ = new global::RequestEnvelop.Types.Unknown6();
          }
          input.ReadMessage(unknown6_);
          break;
        }
        case 57: {
          Latitude = input.ReadFixed64();
          break;
        }
        case 65: {
          Longitude = input.ReadFixed64();
          break;
        }
        case 73: {
          Altitude = input.ReadFixed64();
          break;
        }
        case 82: {
          if (auth_ == null) {
            auth_ = new global::RequestEnvelop.Types.AuthInfo();
          }
          input.ReadMessage(auth_);
          break;
        }
        case 90: {
          if (unknown11_ == null) {
            unknown11_ = new global::UnknownAuth();
          }
          input.ReadMessage(unknown11_);
          break;
        }
        case 96: {
          Unknown12 = input.ReadInt64();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the RequestEnvelop message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Requests : pb::IMessage<Requests> {
      private static readonly pb::MessageParser<Requests> _parser = new pb::MessageParser<Requests>(() => new Requests());
      public static pb::MessageParser<Requests> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::RequestEnvelop.Descriptor.NestedTypes[0]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public Requests() {
        OnConstruction();
      }

      partial void OnConstruction();

      public Requests(Requests other) : this() {
        type_ = other.type_;
        message_ = other.message_;
      }

      public Requests Clone() {
        return new Requests(this);
      }

      /// <summary>Field number for the "type" field.</summary>
      public const int TypeFieldNumber = 1;
      private int type_;
      public int Type {
        get { return type_; }
        set {
          type_ = value;
        }
      }

      /// <summary>Field number for the "message" field.</summary>
      public const int MessageFieldNumber = 2;
      private pb::ByteString message_ = pb::ByteString.Empty;
      public pb::ByteString Message {
        get { return message_; }
        set {
          message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      public override bool Equals(object other) {
        return Equals(other as Requests);
      }

      public bool Equals(Requests other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Type != other.Type) return false;
        if (Message != other.Message) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Type != 0) hash ^= Type.GetHashCode();
        if (Message.Length != 0) hash ^= Message.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Type != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(Type);
        }
        if (Message.Length != 0) {
          output.WriteRawTag(18);
          output.WriteBytes(Message);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Type != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
        }
        if (Message.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
        }
        return size;
      }

      public void MergeFrom(Requests other) {
        if (other == null) {
          return;
        }
        if (other.Type != 0) {
          Type = other.Type;
        }
        if (other.Message.Length != 0) {
          Message = other.Message;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              Type = input.ReadInt32();
              break;
            }
            case 18: {
              Message = input.ReadBytes();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MessageSingleString : pb::IMessage<MessageSingleString> {
      private static readonly pb::MessageParser<MessageSingleString> _parser = new pb::MessageParser<MessageSingleString>(() => new MessageSingleString());
      public static pb::MessageParser<MessageSingleString> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::RequestEnvelop.Descriptor.NestedTypes[1]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public MessageSingleString() {
        OnConstruction();
      }

      partial void OnConstruction();

      public MessageSingleString(MessageSingleString other) : this() {
        f1_ = other.f1_;
      }

      public MessageSingleString Clone() {
        return new MessageSingleString(this);
      }

      /// <summary>Field number for the "f1" field.</summary>
      public const int F1FieldNumber = 1;
      private string f1_ = "";
      public string F1 {
        get { return f1_; }
        set {
          f1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      public override bool Equals(object other) {
        return Equals(other as MessageSingleString);
      }

      public bool Equals(MessageSingleString other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (F1 != other.F1) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (F1.Length != 0) hash ^= F1.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (F1.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(F1);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (F1.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(F1);
        }
        return size;
      }

      public void MergeFrom(MessageSingleString other) {
        if (other == null) {
          return;
        }
        if (other.F1.Length != 0) {
          F1 = other.F1;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              F1 = input.ReadString();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MessageSingleInt : pb::IMessage<MessageSingleInt> {
      private static readonly pb::MessageParser<MessageSingleInt> _parser = new pb::MessageParser<MessageSingleInt>(() => new MessageSingleInt());
      public static pb::MessageParser<MessageSingleInt> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::RequestEnvelop.Descriptor.NestedTypes[2]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public MessageSingleInt() {
        OnConstruction();
      }

      partial void OnConstruction();

      public MessageSingleInt(MessageSingleInt other) : this() {
        f1_ = other.f1_;
      }

      public MessageSingleInt Clone() {
        return new MessageSingleInt(this);
      }

      /// <summary>Field number for the "f1" field.</summary>
      public const int F1FieldNumber = 1;
      private long f1_;
      public long F1 {
        get { return f1_; }
        set {
          f1_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as MessageSingleInt);
      }

      public bool Equals(MessageSingleInt other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (F1 != other.F1) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (F1 != 0L) hash ^= F1.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (F1 != 0L) {
          output.WriteRawTag(8);
          output.WriteInt64(F1);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (F1 != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(F1);
        }
        return size;
      }

      public void MergeFrom(MessageSingleInt other) {
        if (other == null) {
          return;
        }
        if (other.F1 != 0L) {
          F1 = other.F1;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              F1 = input.ReadInt64();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MessageTwoInts : pb::IMessage<MessageTwoInts> {
      private static readonly pb::MessageParser<MessageTwoInts> _parser = new pb::MessageParser<MessageTwoInts>(() => new MessageTwoInts());
      public static pb::MessageParser<MessageTwoInts> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::RequestEnvelop.Descriptor.NestedTypes[3]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public MessageTwoInts() {
        OnConstruction();
      }

      partial void OnConstruction();

      public MessageTwoInts(MessageTwoInts other) : this() {
        f1_ = other.f1_;
        f5_ = other.f5_;
      }

      public MessageTwoInts Clone() {
        return new MessageTwoInts(this);
      }

      /// <summary>Field number for the "f1" field.</summary>
      public const int F1FieldNumber = 1;
      private long f1_;
      public long F1 {
        get { return f1_; }
        set {
          f1_ = value;
        }
      }

      /// <summary>Field number for the "f5" field.</summary>
      public const int F5FieldNumber = 5;
      private long f5_;
      public long F5 {
        get { return f5_; }
        set {
          f5_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as MessageTwoInts);
      }

      public bool Equals(MessageTwoInts other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (F1 != other.F1) return false;
        if (F5 != other.F5) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (F1 != 0L) hash ^= F1.GetHashCode();
        if (F5 != 0L) hash ^= F5.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (F1 != 0L) {
          output.WriteRawTag(8);
          output.WriteInt64(F1);
        }
        if (F5 != 0L) {
          output.WriteRawTag(40);
          output.WriteInt64(F5);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (F1 != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(F1);
        }
        if (F5 != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(F5);
        }
        return size;
      }

      public void MergeFrom(MessageTwoInts other) {
        if (other == null) {
          return;
        }
        if (other.F1 != 0L) {
          F1 = other.F1;
        }
        if (other.F5 != 0L) {
          F5 = other.F5;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              F1 = input.ReadInt64();
              break;
            }
            case 40: {
              F5 = input.ReadInt64();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MessageQuad : pb::IMessage<MessageQuad> {
      private static readonly pb::MessageParser<MessageQuad> _parser = new pb::MessageParser<MessageQuad>(() => new MessageQuad());
      public static pb::MessageParser<MessageQuad> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::RequestEnvelop.Descriptor.NestedTypes[4]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public MessageQuad() {
        OnConstruction();
      }

      partial void OnConstruction();

      public MessageQuad(MessageQuad other) : this() {
        f1_ = other.f1_;
        f2_ = other.f2_;
        lat_ = other.lat_;
        long_ = other.long_;
      }

      public MessageQuad Clone() {
        return new MessageQuad(this);
      }

      /// <summary>Field number for the "f1" field.</summary>
      public const int F1FieldNumber = 1;
      private pb::ByteString f1_ = pb::ByteString.Empty;
      public pb::ByteString F1 {
        get { return f1_; }
        set {
          f1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "f2" field.</summary>
      public const int F2FieldNumber = 2;
      private pb::ByteString f2_ = pb::ByteString.Empty;
      public pb::ByteString F2 {
        get { return f2_; }
        set {
          f2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "lat" field.</summary>
      public const int LatFieldNumber = 3;
      private long lat_;
      public long Lat {
        get { return lat_; }
        set {
          lat_ = value;
        }
      }

      /// <summary>Field number for the "long" field.</summary>
      public const int LongFieldNumber = 4;
      private long long_;
      public long Long {
        get { return long_; }
        set {
          long_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as MessageQuad);
      }

      public bool Equals(MessageQuad other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (F1 != other.F1) return false;
        if (F2 != other.F2) return false;
        if (Lat != other.Lat) return false;
        if (Long != other.Long) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (F1.Length != 0) hash ^= F1.GetHashCode();
        if (F2.Length != 0) hash ^= F2.GetHashCode();
        if (Lat != 0L) hash ^= Lat.GetHashCode();
        if (Long != 0L) hash ^= Long.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (F1.Length != 0) {
          output.WriteRawTag(10);
          output.WriteBytes(F1);
        }
        if (F2.Length != 0) {
          output.WriteRawTag(18);
          output.WriteBytes(F2);
        }
        if (Lat != 0L) {
          output.WriteRawTag(25);
          output.WriteSFixed64(Lat);
        }
        if (Long != 0L) {
          output.WriteRawTag(33);
          output.WriteSFixed64(Long);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (F1.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(F1);
        }
        if (F2.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(F2);
        }
        if (Lat != 0L) {
          size += 1 + 8;
        }
        if (Long != 0L) {
          size += 1 + 8;
        }
        return size;
      }

      public void MergeFrom(MessageQuad other) {
        if (other == null) {
          return;
        }
        if (other.F1.Length != 0) {
          F1 = other.F1;
        }
        if (other.F2.Length != 0) {
          F2 = other.F2;
        }
        if (other.Lat != 0L) {
          Lat = other.Lat;
        }
        if (other.Long != 0L) {
          Long = other.Long;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              F1 = input.ReadBytes();
              break;
            }
            case 18: {
              F2 = input.ReadBytes();
              break;
            }
            case 25: {
              Lat = input.ReadSFixed64();
              break;
            }
            case 33: {
              Long = input.ReadSFixed64();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Wat : pb::IMessage<Wat> {
      private static readonly pb::MessageParser<Wat> _parser = new pb::MessageParser<Wat>(() => new Wat());
      public static pb::MessageParser<Wat> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::RequestEnvelop.Descriptor.NestedTypes[5]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public Wat() {
        OnConstruction();
      }

      partial void OnConstruction();

      public Wat(Wat other) : this() {
        lols_ = other.lols_.Clone();
      }

      public Wat Clone() {
        return new Wat(this);
      }

      /// <summary>Field number for the "lols" field.</summary>
      public const int LolsFieldNumber = 134217728;
      private static readonly pb::FieldCodec<long> _repeated_lols_codec
          = pb::FieldCodec.ForInt64(1073741826);
      private readonly pbc::RepeatedField<long> lols_ = new pbc::RepeatedField<long>();
      public pbc::RepeatedField<long> Lols {
        get { return lols_; }
      }

      public override bool Equals(object other) {
        return Equals(other as Wat);
      }

      public bool Equals(Wat other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!lols_.Equals(other.lols_)) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        hash ^= lols_.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        lols_.WriteTo(output, _repeated_lols_codec);
      }

      public int CalculateSize() {
        int size = 0;
        size += lols_.CalculateSize(_repeated_lols_codec);
        return size;
      }

      public void MergeFrom(Wat other) {
        if (other == null) {
          return;
        }
        lols_.Add(other.lols_);
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 1073741826:
            case 1073741824: {
              lols_.AddEntriesFrom(input, _repeated_lols_codec);
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Unknown3 : pb::IMessage<Unknown3> {
      private static readonly pb::MessageParser<Unknown3> _parser = new pb::MessageParser<Unknown3>(() => new Unknown3());
      public static pb::MessageParser<Unknown3> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::RequestEnvelop.Descriptor.NestedTypes[6]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public Unknown3() {
        OnConstruction();
      }

      partial void OnConstruction();

      public Unknown3(Unknown3 other) : this() {
        unknown4_ = other.unknown4_;
        unknown2_ = other.unknown2_;
        lat_ = other.lat_;
        long_ = other.long_;
      }

      public Unknown3 Clone() {
        return new Unknown3(this);
      }

      /// <summary>Field number for the "unknown4" field.</summary>
      public const int Unknown4FieldNumber = 1;
      private string unknown4_ = "";
      public string Unknown4 {
        get { return unknown4_; }
        set {
          unknown4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "unknown2" field.</summary>
      public const int Unknown2FieldNumber = 2;
      private pb::ByteString unknown2_ = pb::ByteString.Empty;
      public pb::ByteString Unknown2 {
        get { return unknown2_; }
        set {
          unknown2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "lat" field.</summary>
      public const int LatFieldNumber = 3;
      private ulong lat_;
      public ulong Lat {
        get { return lat_; }
        set {
          lat_ = value;
        }
      }

      /// <summary>Field number for the "long" field.</summary>
      public const int LongFieldNumber = 4;
      private ulong long_;
      public ulong Long {
        get { return long_; }
        set {
          long_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as Unknown3);
      }

      public bool Equals(Unknown3 other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Unknown4 != other.Unknown4) return false;
        if (Unknown2 != other.Unknown2) return false;
        if (Lat != other.Lat) return false;
        if (Long != other.Long) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Unknown4.Length != 0) hash ^= Unknown4.GetHashCode();
        if (Unknown2.Length != 0) hash ^= Unknown2.GetHashCode();
        if (Lat != 0UL) hash ^= Lat.GetHashCode();
        if (Long != 0UL) hash ^= Long.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Unknown4.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Unknown4);
        }
        if (Unknown2.Length != 0) {
          output.WriteRawTag(18);
          output.WriteBytes(Unknown2);
        }
        if (Lat != 0UL) {
          output.WriteRawTag(25);
          output.WriteFixed64(Lat);
        }
        if (Long != 0UL) {
          output.WriteRawTag(33);
          output.WriteFixed64(Long);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Unknown4.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Unknown4);
        }
        if (Unknown2.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unknown2);
        }
        if (Lat != 0UL) {
          size += 1 + 8;
        }
        if (Long != 0UL) {
          size += 1 + 8;
        }
        return size;
      }

      public void MergeFrom(Unknown3 other) {
        if (other == null) {
          return;
        }
        if (other.Unknown4.Length != 0) {
          Unknown4 = other.Unknown4;
        }
        if (other.Unknown2.Length != 0) {
          Unknown2 = other.Unknown2;
        }
        if (other.Lat != 0UL) {
          Lat = other.Lat;
        }
        if (other.Long != 0UL) {
          Long = other.Long;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              Unknown4 = input.ReadString();
              break;
            }
            case 18: {
              Unknown2 = input.ReadBytes();
              break;
            }
            case 25: {
              Lat = input.ReadFixed64();
              break;
            }
            case 33: {
              Long = input.ReadFixed64();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Unknown6 : pb::IMessage<Unknown6> {
      private static readonly pb::MessageParser<Unknown6> _parser = new pb::MessageParser<Unknown6>(() => new Unknown6());
      public static pb::MessageParser<Unknown6> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::RequestEnvelop.Descriptor.NestedTypes[7]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public Unknown6() {
        OnConstruction();
      }

      partial void OnConstruction();

      public Unknown6(Unknown6 other) : this() {
        unknown1_ = other.unknown1_;
        Unknown2 = other.unknown2_ != null ? other.Unknown2.Clone() : null;
      }

      public Unknown6 Clone() {
        return new Unknown6(this);
      }

      /// <summary>Field number for the "unknown1" field.</summary>
      public const int Unknown1FieldNumber = 1;
      private int unknown1_;
      public int Unknown1 {
        get { return unknown1_; }
        set {
          unknown1_ = value;
        }
      }

      /// <summary>Field number for the "unknown2" field.</summary>
      public const int Unknown2FieldNumber = 2;
      private global::RequestEnvelop.Types.Unknown6.Types.Unknown2 unknown2_;
      public global::RequestEnvelop.Types.Unknown6.Types.Unknown2 Unknown2 {
        get { return unknown2_; }
        set {
          unknown2_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as Unknown6);
      }

      public bool Equals(Unknown6 other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Unknown1 != other.Unknown1) return false;
        if (!object.Equals(Unknown2, other.Unknown2)) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Unknown1 != 0) hash ^= Unknown1.GetHashCode();
        if (unknown2_ != null) hash ^= Unknown2.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Unknown1 != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(Unknown1);
        }
        if (unknown2_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(Unknown2);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Unknown1 != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown1);
        }
        if (unknown2_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unknown2);
        }
        return size;
      }

      public void MergeFrom(Unknown6 other) {
        if (other == null) {
          return;
        }
        if (other.Unknown1 != 0) {
          Unknown1 = other.Unknown1;
        }
        if (other.unknown2_ != null) {
          if (unknown2_ == null) {
            unknown2_ = new global::RequestEnvelop.Types.Unknown6.Types.Unknown2();
          }
          Unknown2.MergeFrom(other.Unknown2);
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              Unknown1 = input.ReadInt32();
              break;
            }
            case 18: {
              if (unknown2_ == null) {
                unknown2_ = new global::RequestEnvelop.Types.Unknown6.Types.Unknown2();
              }
              input.ReadMessage(unknown2_);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Unknown6 message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Unknown2 : pb::IMessage<Unknown2> {
          private static readonly pb::MessageParser<Unknown2> _parser = new pb::MessageParser<Unknown2>(() => new Unknown2());
          public static pb::MessageParser<Unknown2> Parser { get { return _parser; } }

          public static pbr::MessageDescriptor Descriptor {
            get { return global::RequestEnvelop.Types.Unknown6.Descriptor.NestedTypes[0]; }
          }

          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          public Unknown2() {
            OnConstruction();
          }

          partial void OnConstruction();

          public Unknown2(Unknown2 other) : this() {
            unknown1_ = other.unknown1_;
          }

          public Unknown2 Clone() {
            return new Unknown2(this);
          }

          /// <summary>Field number for the "unknown1" field.</summary>
          public const int Unknown1FieldNumber = 1;
          private pb::ByteString unknown1_ = pb::ByteString.Empty;
          public pb::ByteString Unknown1 {
            get { return unknown1_; }
            set {
              unknown1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          public override bool Equals(object other) {
            return Equals(other as Unknown2);
          }

          public bool Equals(Unknown2 other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Unknown1 != other.Unknown1) return false;
            return true;
          }

          public override int GetHashCode() {
            int hash = 1;
            if (Unknown1.Length != 0) hash ^= Unknown1.GetHashCode();
            return hash;
          }

          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          public void WriteTo(pb::CodedOutputStream output) {
            if (Unknown1.Length != 0) {
              output.WriteRawTag(10);
              output.WriteBytes(Unknown1);
            }
          }

          public int CalculateSize() {
            int size = 0;
            if (Unknown1.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unknown1);
            }
            return size;
          }

          public void MergeFrom(Unknown2 other) {
            if (other == null) {
              return;
            }
            if (other.Unknown1.Length != 0) {
              Unknown1 = other.Unknown1;
            }
          }

          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 10: {
                  Unknown1 = input.ReadBytes();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AuthInfo : pb::IMessage<AuthInfo> {
      private static readonly pb::MessageParser<AuthInfo> _parser = new pb::MessageParser<AuthInfo>(() => new AuthInfo());
      public static pb::MessageParser<AuthInfo> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::RequestEnvelop.Descriptor.NestedTypes[8]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public AuthInfo() {
        OnConstruction();
      }

      partial void OnConstruction();

      public AuthInfo(AuthInfo other) : this() {
        provider_ = other.provider_;
        Token = other.token_ != null ? other.Token.Clone() : null;
      }

      public AuthInfo Clone() {
        return new AuthInfo(this);
      }

      /// <summary>Field number for the "provider" field.</summary>
      public const int ProviderFieldNumber = 1;
      private string provider_ = "";
      public string Provider {
        get { return provider_; }
        set {
          provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "token" field.</summary>
      public const int TokenFieldNumber = 2;
      private global::RequestEnvelop.Types.AuthInfo.Types.JWT token_;
      public global::RequestEnvelop.Types.AuthInfo.Types.JWT Token {
        get { return token_; }
        set {
          token_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as AuthInfo);
      }

      public bool Equals(AuthInfo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Provider != other.Provider) return false;
        if (!object.Equals(Token, other.Token)) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Provider.Length != 0) hash ^= Provider.GetHashCode();
        if (token_ != null) hash ^= Token.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Provider.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Provider);
        }
        if (token_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(Token);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Provider.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
        }
        if (token_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Token);
        }
        return size;
      }

      public void MergeFrom(AuthInfo other) {
        if (other == null) {
          return;
        }
        if (other.Provider.Length != 0) {
          Provider = other.Provider;
        }
        if (other.token_ != null) {
          if (token_ == null) {
            token_ = new global::RequestEnvelop.Types.AuthInfo.Types.JWT();
          }
          Token.MergeFrom(other.Token);
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              Provider = input.ReadString();
              break;
            }
            case 18: {
              if (token_ == null) {
                token_ = new global::RequestEnvelop.Types.AuthInfo.Types.JWT();
              }
              input.ReadMessage(token_);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the AuthInfo message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class JWT : pb::IMessage<JWT> {
          private static readonly pb::MessageParser<JWT> _parser = new pb::MessageParser<JWT>(() => new JWT());
          public static pb::MessageParser<JWT> Parser { get { return _parser; } }

          public static pbr::MessageDescriptor Descriptor {
            get { return global::RequestEnvelop.Types.AuthInfo.Descriptor.NestedTypes[0]; }
          }

          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          public JWT() {
            OnConstruction();
          }

          partial void OnConstruction();

          public JWT(JWT other) : this() {
            contents_ = other.contents_;
            unknown13_ = other.unknown13_;
          }

          public JWT Clone() {
            return new JWT(this);
          }

          /// <summary>Field number for the "contents" field.</summary>
          public const int ContentsFieldNumber = 1;
          private string contents_ = "";
          public string Contents {
            get { return contents_; }
            set {
              contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "unknown13" field.</summary>
          public const int Unknown13FieldNumber = 2;
          private int unknown13_;
          public int Unknown13 {
            get { return unknown13_; }
            set {
              unknown13_ = value;
            }
          }

          public override bool Equals(object other) {
            return Equals(other as JWT);
          }

          public bool Equals(JWT other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Contents != other.Contents) return false;
            if (Unknown13 != other.Unknown13) return false;
            return true;
          }

          public override int GetHashCode() {
            int hash = 1;
            if (Contents.Length != 0) hash ^= Contents.GetHashCode();
            if (Unknown13 != 0) hash ^= Unknown13.GetHashCode();
            return hash;
          }

          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          public void WriteTo(pb::CodedOutputStream output) {
            if (Contents.Length != 0) {
              output.WriteRawTag(10);
              output.WriteString(Contents);
            }
            if (Unknown13 != 0) {
              output.WriteRawTag(16);
              output.WriteInt32(Unknown13);
            }
          }

          public int CalculateSize() {
            int size = 0;
            if (Contents.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Contents);
            }
            if (Unknown13 != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown13);
            }
            return size;
          }

          public void MergeFrom(JWT other) {
            if (other == null) {
              return;
            }
            if (other.Contents.Length != 0) {
              Contents = other.Contents;
            }
            if (other.Unknown13 != 0) {
              Unknown13 = other.Unknown13;
            }
          }

          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 10: {
                  Contents = input.ReadString();
                  break;
                }
                case 16: {
                  Unknown13 = input.ReadInt32();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UnknownAuth : pb::IMessage<UnknownAuth> {
  private static readonly pb::MessageParser<UnknownAuth> _parser = new pb::MessageParser<UnknownAuth>(() => new UnknownAuth());
  public static pb::MessageParser<UnknownAuth> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::PokemonReflection.Descriptor.MessageTypes[1]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public UnknownAuth() {
    OnConstruction();
  }

  partial void OnConstruction();

  public UnknownAuth(UnknownAuth other) : this() {
    unknown71_ = other.unknown71_;
    unknown72_ = other.unknown72_;
    unknown73_ = other.unknown73_;
  }

  public UnknownAuth Clone() {
    return new UnknownAuth(this);
  }

  /// <summary>Field number for the "unknown71" field.</summary>
  public const int Unknown71FieldNumber = 1;
  private pb::ByteString unknown71_ = pb::ByteString.Empty;
  public pb::ByteString Unknown71 {
    get { return unknown71_; }
    set {
      unknown71_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "unknown72" field.</summary>
  public const int Unknown72FieldNumber = 2;
  private long unknown72_;
  public long Unknown72 {
    get { return unknown72_; }
    set {
      unknown72_ = value;
    }
  }

  /// <summary>Field number for the "unknown73" field.</summary>
  public const int Unknown73FieldNumber = 3;
  private pb::ByteString unknown73_ = pb::ByteString.Empty;
  public pb::ByteString Unknown73 {
    get { return unknown73_; }
    set {
      unknown73_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as UnknownAuth);
  }

  public bool Equals(UnknownAuth other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Unknown71 != other.Unknown71) return false;
    if (Unknown72 != other.Unknown72) return false;
    if (Unknown73 != other.Unknown73) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Unknown71.Length != 0) hash ^= Unknown71.GetHashCode();
    if (Unknown72 != 0L) hash ^= Unknown72.GetHashCode();
    if (Unknown73.Length != 0) hash ^= Unknown73.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Unknown71.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Unknown71);
    }
    if (Unknown72 != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Unknown72);
    }
    if (Unknown73.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Unknown73);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Unknown71.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unknown71);
    }
    if (Unknown72 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Unknown72);
    }
    if (Unknown73.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unknown73);
    }
    return size;
  }

  public void MergeFrom(UnknownAuth other) {
    if (other == null) {
      return;
    }
    if (other.Unknown71.Length != 0) {
      Unknown71 = other.Unknown71;
    }
    if (other.Unknown72 != 0L) {
      Unknown72 = other.Unknown72;
    }
    if (other.Unknown73.Length != 0) {
      Unknown73 = other.Unknown73;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Unknown71 = input.ReadBytes();
          break;
        }
        case 16: {
          Unknown72 = input.ReadInt64();
          break;
        }
        case 26: {
          Unknown73 = input.ReadBytes();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Payload : pb::IMessage<Payload> {
  private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
  public static pb::MessageParser<Payload> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::PokemonReflection.Descriptor.MessageTypes[2]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Payload() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Payload(Payload other) : this() {
    unknown1_ = other.unknown1_;
    Profile = other.profile_ != null ? other.Profile.Clone() : null;
  }

  public Payload Clone() {
    return new Payload(this);
  }

  /// <summary>Field number for the "unknown1" field.</summary>
  public const int Unknown1FieldNumber = 1;
  private int unknown1_;
  public int Unknown1 {
    get { return unknown1_; }
    set {
      unknown1_ = value;
    }
  }

  /// <summary>Field number for the "profile" field.</summary>
  public const int ProfileFieldNumber = 2;
  private global::Profile profile_;
  public global::Profile Profile {
    get { return profile_; }
    set {
      profile_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Payload);
  }

  public bool Equals(Payload other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Unknown1 != other.Unknown1) return false;
    if (!object.Equals(Profile, other.Profile)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Unknown1 != 0) hash ^= Unknown1.GetHashCode();
    if (profile_ != null) hash ^= Profile.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Unknown1 != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Unknown1);
    }
    if (profile_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Profile);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Unknown1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown1);
    }
    if (profile_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
    }
    return size;
  }

  public void MergeFrom(Payload other) {
    if (other == null) {
      return;
    }
    if (other.Unknown1 != 0) {
      Unknown1 = other.Unknown1;
    }
    if (other.profile_ != null) {
      if (profile_ == null) {
        profile_ = new global::Profile();
      }
      Profile.MergeFrom(other.Profile);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Unknown1 = input.ReadInt32();
          break;
        }
        case 18: {
          if (profile_ == null) {
            profile_ = new global::Profile();
          }
          input.ReadMessage(profile_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Profile : pb::IMessage<Profile> {
  private static readonly pb::MessageParser<Profile> _parser = new pb::MessageParser<Profile>(() => new Profile());
  public static pb::MessageParser<Profile> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::PokemonReflection.Descriptor.MessageTypes[3]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Profile() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Profile(Profile other) : this() {
    creationTime_ = other.creationTime_;
    username_ = other.username_;
    team_ = other.team_;
    tutorial_ = other.tutorial_;
    Avatar = other.avatar_ != null ? other.Avatar.Clone() : null;
    pokeStorage_ = other.pokeStorage_;
    itemStorage_ = other.itemStorage_;
    unknown11_ = other.unknown11_;
    unknown12_ = other.unknown12_;
    unknown13_ = other.unknown13_;
    currency_ = other.currency_.Clone();
  }

  public Profile Clone() {
    return new Profile(this);
  }

  /// <summary>Field number for the "creation_time" field.</summary>
  public const int CreationTimeFieldNumber = 1;
  private long creationTime_;
  public long CreationTime {
    get { return creationTime_; }
    set {
      creationTime_ = value;
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 2;
  private string username_ = "";
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "team" field.</summary>
  public const int TeamFieldNumber = 5;
  private int team_;
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  /// <summary>Field number for the "tutorial" field.</summary>
  public const int TutorialFieldNumber = 7;
  private pb::ByteString tutorial_ = pb::ByteString.Empty;
  public pb::ByteString Tutorial {
    get { return tutorial_; }
    set {
      tutorial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 8;
  private global::Profile.Types.AvatarDetails avatar_;
  public global::Profile.Types.AvatarDetails Avatar {
    get { return avatar_; }
    set {
      avatar_ = value;
    }
  }

  /// <summary>Field number for the "poke_storage" field.</summary>
  public const int PokeStorageFieldNumber = 9;
  private int pokeStorage_;
  public int PokeStorage {
    get { return pokeStorage_; }
    set {
      pokeStorage_ = value;
    }
  }

  /// <summary>Field number for the "item_storage" field.</summary>
  public const int ItemStorageFieldNumber = 10;
  private int itemStorage_;
  public int ItemStorage {
    get { return itemStorage_; }
    set {
      itemStorage_ = value;
    }
  }

  /// <summary>Field number for the "unknown11" field.</summary>
  public const int Unknown11FieldNumber = 11;
  private string unknown11_ = "";
  public string Unknown11 {
    get { return unknown11_; }
    set {
      unknown11_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "unknown12" field.</summary>
  public const int Unknown12FieldNumber = 12;
  private string unknown12_ = "";
  public string Unknown12 {
    get { return unknown12_; }
    set {
      unknown12_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "unknown13" field.</summary>
  public const int Unknown13FieldNumber = 13;
  private string unknown13_ = "";
  public string Unknown13 {
    get { return unknown13_; }
    set {
      unknown13_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "currency" field.</summary>
  public const int CurrencyFieldNumber = 14;
  private static readonly pb::FieldCodec<global::Profile.Types.Currency> _repeated_currency_codec
      = pb::FieldCodec.ForMessage(114, global::Profile.Types.Currency.Parser);
  private readonly pbc::RepeatedField<global::Profile.Types.Currency> currency_ = new pbc::RepeatedField<global::Profile.Types.Currency>();
  public pbc::RepeatedField<global::Profile.Types.Currency> Currency {
    get { return currency_; }
  }

  public override bool Equals(object other) {
    return Equals(other as Profile);
  }

  public bool Equals(Profile other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CreationTime != other.CreationTime) return false;
    if (Username != other.Username) return false;
    if (Team != other.Team) return false;
    if (Tutorial != other.Tutorial) return false;
    if (!object.Equals(Avatar, other.Avatar)) return false;
    if (PokeStorage != other.PokeStorage) return false;
    if (ItemStorage != other.ItemStorage) return false;
    if (Unknown11 != other.Unknown11) return false;
    if (Unknown12 != other.Unknown12) return false;
    if (Unknown13 != other.Unknown13) return false;
    if(!currency_.Equals(other.currency_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (CreationTime != 0L) hash ^= CreationTime.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Team != 0) hash ^= Team.GetHashCode();
    if (Tutorial.Length != 0) hash ^= Tutorial.GetHashCode();
    if (avatar_ != null) hash ^= Avatar.GetHashCode();
    if (PokeStorage != 0) hash ^= PokeStorage.GetHashCode();
    if (ItemStorage != 0) hash ^= ItemStorage.GetHashCode();
    if (Unknown11.Length != 0) hash ^= Unknown11.GetHashCode();
    if (Unknown12.Length != 0) hash ^= Unknown12.GetHashCode();
    if (Unknown13.Length != 0) hash ^= Unknown13.GetHashCode();
    hash ^= currency_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (CreationTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(CreationTime);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Username);
    }
    if (Team != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Team);
    }
    if (Tutorial.Length != 0) {
      output.WriteRawTag(58);
      output.WriteBytes(Tutorial);
    }
    if (avatar_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Avatar);
    }
    if (PokeStorage != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(PokeStorage);
    }
    if (ItemStorage != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(ItemStorage);
    }
    if (Unknown11.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Unknown11);
    }
    if (Unknown12.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(Unknown12);
    }
    if (Unknown13.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(Unknown13);
    }
    currency_.WriteTo(output, _repeated_currency_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (CreationTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTime);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    if (Tutorial.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Tutorial);
    }
    if (avatar_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
    }
    if (PokeStorage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokeStorage);
    }
    if (ItemStorage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemStorage);
    }
    if (Unknown11.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Unknown11);
    }
    if (Unknown12.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Unknown12);
    }
    if (Unknown13.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Unknown13);
    }
    size += currency_.CalculateSize(_repeated_currency_codec);
    return size;
  }

  public void MergeFrom(Profile other) {
    if (other == null) {
      return;
    }
    if (other.CreationTime != 0L) {
      CreationTime = other.CreationTime;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    if (other.Tutorial.Length != 0) {
      Tutorial = other.Tutorial;
    }
    if (other.avatar_ != null) {
      if (avatar_ == null) {
        avatar_ = new global::Profile.Types.AvatarDetails();
      }
      Avatar.MergeFrom(other.Avatar);
    }
    if (other.PokeStorage != 0) {
      PokeStorage = other.PokeStorage;
    }
    if (other.ItemStorage != 0) {
      ItemStorage = other.ItemStorage;
    }
    if (other.Unknown11.Length != 0) {
      Unknown11 = other.Unknown11;
    }
    if (other.Unknown12.Length != 0) {
      Unknown12 = other.Unknown12;
    }
    if (other.Unknown13.Length != 0) {
      Unknown13 = other.Unknown13;
    }
    currency_.Add(other.currency_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          CreationTime = input.ReadInt64();
          break;
        }
        case 18: {
          Username = input.ReadString();
          break;
        }
        case 40: {
          Team = input.ReadInt32();
          break;
        }
        case 58: {
          Tutorial = input.ReadBytes();
          break;
        }
        case 66: {
          if (avatar_ == null) {
            avatar_ = new global::Profile.Types.AvatarDetails();
          }
          input.ReadMessage(avatar_);
          break;
        }
        case 72: {
          PokeStorage = input.ReadInt32();
          break;
        }
        case 80: {
          ItemStorage = input.ReadInt32();
          break;
        }
        case 90: {
          Unknown11 = input.ReadString();
          break;
        }
        case 98: {
          Unknown12 = input.ReadString();
          break;
        }
        case 106: {
          Unknown13 = input.ReadString();
          break;
        }
        case 114: {
          currency_.AddEntriesFrom(input, _repeated_currency_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Profile message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AvatarDetails : pb::IMessage<AvatarDetails> {
      private static readonly pb::MessageParser<AvatarDetails> _parser = new pb::MessageParser<AvatarDetails>(() => new AvatarDetails());
      public static pb::MessageParser<AvatarDetails> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::Profile.Descriptor.NestedTypes[0]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public AvatarDetails() {
        OnConstruction();
      }

      partial void OnConstruction();

      public AvatarDetails(AvatarDetails other) : this() {
        unknown2_ = other.unknown2_;
        unknown3_ = other.unknown3_;
        unknown9_ = other.unknown9_;
        unknown10_ = other.unknown10_;
      }

      public AvatarDetails Clone() {
        return new AvatarDetails(this);
      }

      /// <summary>Field number for the "unknown2" field.</summary>
      public const int Unknown2FieldNumber = 2;
      private int unknown2_;
      public int Unknown2 {
        get { return unknown2_; }
        set {
          unknown2_ = value;
        }
      }

      /// <summary>Field number for the "unknown3" field.</summary>
      public const int Unknown3FieldNumber = 3;
      private int unknown3_;
      public int Unknown3 {
        get { return unknown3_; }
        set {
          unknown3_ = value;
        }
      }

      /// <summary>Field number for the "unknown9" field.</summary>
      public const int Unknown9FieldNumber = 9;
      private int unknown9_;
      public int Unknown9 {
        get { return unknown9_; }
        set {
          unknown9_ = value;
        }
      }

      /// <summary>Field number for the "unknown10" field.</summary>
      public const int Unknown10FieldNumber = 10;
      private int unknown10_;
      public int Unknown10 {
        get { return unknown10_; }
        set {
          unknown10_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as AvatarDetails);
      }

      public bool Equals(AvatarDetails other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Unknown2 != other.Unknown2) return false;
        if (Unknown3 != other.Unknown3) return false;
        if (Unknown9 != other.Unknown9) return false;
        if (Unknown10 != other.Unknown10) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Unknown2 != 0) hash ^= Unknown2.GetHashCode();
        if (Unknown3 != 0) hash ^= Unknown3.GetHashCode();
        if (Unknown9 != 0) hash ^= Unknown9.GetHashCode();
        if (Unknown10 != 0) hash ^= Unknown10.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Unknown2 != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Unknown2);
        }
        if (Unknown3 != 0) {
          output.WriteRawTag(24);
          output.WriteInt32(Unknown3);
        }
        if (Unknown9 != 0) {
          output.WriteRawTag(72);
          output.WriteInt32(Unknown9);
        }
        if (Unknown10 != 0) {
          output.WriteRawTag(80);
          output.WriteInt32(Unknown10);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Unknown2 != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown2);
        }
        if (Unknown3 != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown3);
        }
        if (Unknown9 != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown9);
        }
        if (Unknown10 != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown10);
        }
        return size;
      }

      public void MergeFrom(AvatarDetails other) {
        if (other == null) {
          return;
        }
        if (other.Unknown2 != 0) {
          Unknown2 = other.Unknown2;
        }
        if (other.Unknown3 != 0) {
          Unknown3 = other.Unknown3;
        }
        if (other.Unknown9 != 0) {
          Unknown9 = other.Unknown9;
        }
        if (other.Unknown10 != 0) {
          Unknown10 = other.Unknown10;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 16: {
              Unknown2 = input.ReadInt32();
              break;
            }
            case 24: {
              Unknown3 = input.ReadInt32();
              break;
            }
            case 72: {
              Unknown9 = input.ReadInt32();
              break;
            }
            case 80: {
              Unknown10 = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Currency : pb::IMessage<Currency> {
      private static readonly pb::MessageParser<Currency> _parser = new pb::MessageParser<Currency>(() => new Currency());
      public static pb::MessageParser<Currency> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::Profile.Descriptor.NestedTypes[1]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public Currency() {
        OnConstruction();
      }

      partial void OnConstruction();

      public Currency(Currency other) : this() {
        type_ = other.type_;
        amount_ = other.amount_;
      }

      public Currency Clone() {
        return new Currency(this);
      }

      /// <summary>Field number for the "type" field.</summary>
      public const int TypeFieldNumber = 1;
      private string type_ = "";
      public string Type {
        get { return type_; }
        set {
          type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "amount" field.</summary>
      public const int AmountFieldNumber = 2;
      private int amount_;
      public int Amount {
        get { return amount_; }
        set {
          amount_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as Currency);
      }

      public bool Equals(Currency other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Type != other.Type) return false;
        if (Amount != other.Amount) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Type.Length != 0) hash ^= Type.GetHashCode();
        if (Amount != 0) hash ^= Amount.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Type.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Type);
        }
        if (Amount != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(Amount);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Type.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
        }
        if (Amount != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
        }
        return size;
      }

      public void MergeFrom(Currency other) {
        if (other == null) {
          return;
        }
        if (other.Type.Length != 0) {
          Type = other.Type;
        }
        if (other.Amount != 0) {
          Amount = other.Amount;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              Type = input.ReadString();
              break;
            }
            case 16: {
              Amount = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ResponseEnvelop : pb::IMessage<ResponseEnvelop> {
  private static readonly pb::MessageParser<ResponseEnvelop> _parser = new pb::MessageParser<ResponseEnvelop>(() => new ResponseEnvelop());
  public static pb::MessageParser<ResponseEnvelop> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::PokemonReflection.Descriptor.MessageTypes[4]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ResponseEnvelop() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ResponseEnvelop(ResponseEnvelop other) : this() {
    unknown1_ = other.unknown1_;
    unknown2_ = other.unknown2_;
    apiUrl_ = other.apiUrl_;
    Unknown6 = other.unknown6_ != null ? other.Unknown6.Clone() : null;
    Unknown7 = other.unknown7_ != null ? other.Unknown7.Clone() : null;
    payload_ = other.payload_.Clone();
  }

  public ResponseEnvelop Clone() {
    return new ResponseEnvelop(this);
  }

  /// <summary>Field number for the "unknown1" field.</summary>
  public const int Unknown1FieldNumber = 1;
  private int unknown1_;
  public int Unknown1 {
    get { return unknown1_; }
    set {
      unknown1_ = value;
    }
  }

  /// <summary>Field number for the "unknown2" field.</summary>
  public const int Unknown2FieldNumber = 2;
  private long unknown2_;
  public long Unknown2 {
    get { return unknown2_; }
    set {
      unknown2_ = value;
    }
  }

  /// <summary>Field number for the "api_url" field.</summary>
  public const int ApiUrlFieldNumber = 3;
  private string apiUrl_ = "";
  public string ApiUrl {
    get { return apiUrl_; }
    set {
      apiUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "unknown6" field.</summary>
  public const int Unknown6FieldNumber = 6;
  private global::ResponseEnvelop.Types.Unknown6 unknown6_;
  public global::ResponseEnvelop.Types.Unknown6 Unknown6 {
    get { return unknown6_; }
    set {
      unknown6_ = value;
    }
  }

  /// <summary>Field number for the "unknown7" field.</summary>
  public const int Unknown7FieldNumber = 7;
  private global::UnknownAuth unknown7_;
  public global::UnknownAuth Unknown7 {
    get { return unknown7_; }
    set {
      unknown7_ = value;
    }
  }

  /// <summary>Field number for the "payload" field.</summary>
  public const int PayloadFieldNumber = 100;
  private static readonly pb::FieldCodec<global::Payload> _repeated_payload_codec
      = pb::FieldCodec.ForMessage(802, global::Payload.Parser);
  private readonly pbc::RepeatedField<global::Payload> payload_ = new pbc::RepeatedField<global::Payload>();
  public pbc::RepeatedField<global::Payload> Payload {
    get { return payload_; }
  }

  public override bool Equals(object other) {
    return Equals(other as ResponseEnvelop);
  }

  public bool Equals(ResponseEnvelop other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Unknown1 != other.Unknown1) return false;
    if (Unknown2 != other.Unknown2) return false;
    if (ApiUrl != other.ApiUrl) return false;
    if (!object.Equals(Unknown6, other.Unknown6)) return false;
    if (!object.Equals(Unknown7, other.Unknown7)) return false;
    if(!payload_.Equals(other.payload_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Unknown1 != 0) hash ^= Unknown1.GetHashCode();
    if (Unknown2 != 0L) hash ^= Unknown2.GetHashCode();
    if (ApiUrl.Length != 0) hash ^= ApiUrl.GetHashCode();
    if (unknown6_ != null) hash ^= Unknown6.GetHashCode();
    if (unknown7_ != null) hash ^= Unknown7.GetHashCode();
    hash ^= payload_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Unknown1 != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Unknown1);
    }
    if (Unknown2 != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Unknown2);
    }
    if (ApiUrl.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ApiUrl);
    }
    if (unknown6_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Unknown6);
    }
    if (unknown7_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Unknown7);
    }
    payload_.WriteTo(output, _repeated_payload_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (Unknown1 != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown1);
    }
    if (Unknown2 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Unknown2);
    }
    if (ApiUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiUrl);
    }
    if (unknown6_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unknown6);
    }
    if (unknown7_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unknown7);
    }
    size += payload_.CalculateSize(_repeated_payload_codec);
    return size;
  }

  public void MergeFrom(ResponseEnvelop other) {
    if (other == null) {
      return;
    }
    if (other.Unknown1 != 0) {
      Unknown1 = other.Unknown1;
    }
    if (other.Unknown2 != 0L) {
      Unknown2 = other.Unknown2;
    }
    if (other.ApiUrl.Length != 0) {
      ApiUrl = other.ApiUrl;
    }
    if (other.unknown6_ != null) {
      if (unknown6_ == null) {
        unknown6_ = new global::ResponseEnvelop.Types.Unknown6();
      }
      Unknown6.MergeFrom(other.Unknown6);
    }
    if (other.unknown7_ != null) {
      if (unknown7_ == null) {
        unknown7_ = new global::UnknownAuth();
      }
      Unknown7.MergeFrom(other.Unknown7);
    }
    payload_.Add(other.payload_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Unknown1 = input.ReadInt32();
          break;
        }
        case 16: {
          Unknown2 = input.ReadInt64();
          break;
        }
        case 26: {
          ApiUrl = input.ReadString();
          break;
        }
        case 50: {
          if (unknown6_ == null) {
            unknown6_ = new global::ResponseEnvelop.Types.Unknown6();
          }
          input.ReadMessage(unknown6_);
          break;
        }
        case 58: {
          if (unknown7_ == null) {
            unknown7_ = new global::UnknownAuth();
          }
          input.ReadMessage(unknown7_);
          break;
        }
        case 802: {
          payload_.AddEntriesFrom(input, _repeated_payload_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ResponseEnvelop message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Unknown6 : pb::IMessage<Unknown6> {
      private static readonly pb::MessageParser<Unknown6> _parser = new pb::MessageParser<Unknown6>(() => new Unknown6());
      public static pb::MessageParser<Unknown6> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[0]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public Unknown6() {
        OnConstruction();
      }

      partial void OnConstruction();

      public Unknown6(Unknown6 other) : this() {
        unknown1_ = other.unknown1_;
        Unknown2 = other.unknown2_ != null ? other.Unknown2.Clone() : null;
      }

      public Unknown6 Clone() {
        return new Unknown6(this);
      }

      /// <summary>Field number for the "unknown1" field.</summary>
      public const int Unknown1FieldNumber = 1;
      private int unknown1_;
      public int Unknown1 {
        get { return unknown1_; }
        set {
          unknown1_ = value;
        }
      }

      /// <summary>Field number for the "unknown2" field.</summary>
      public const int Unknown2FieldNumber = 2;
      private global::ResponseEnvelop.Types.Unknown6.Types.Unknown2 unknown2_;
      public global::ResponseEnvelop.Types.Unknown6.Types.Unknown2 Unknown2 {
        get { return unknown2_; }
        set {
          unknown2_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as Unknown6);
      }

      public bool Equals(Unknown6 other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Unknown1 != other.Unknown1) return false;
        if (!object.Equals(Unknown2, other.Unknown2)) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Unknown1 != 0) hash ^= Unknown1.GetHashCode();
        if (unknown2_ != null) hash ^= Unknown2.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Unknown1 != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(Unknown1);
        }
        if (unknown2_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(Unknown2);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Unknown1 != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown1);
        }
        if (unknown2_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unknown2);
        }
        return size;
      }

      public void MergeFrom(Unknown6 other) {
        if (other == null) {
          return;
        }
        if (other.Unknown1 != 0) {
          Unknown1 = other.Unknown1;
        }
        if (other.unknown2_ != null) {
          if (unknown2_ == null) {
            unknown2_ = new global::ResponseEnvelop.Types.Unknown6.Types.Unknown2();
          }
          Unknown2.MergeFrom(other.Unknown2);
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              Unknown1 = input.ReadInt32();
              break;
            }
            case 18: {
              if (unknown2_ == null) {
                unknown2_ = new global::ResponseEnvelop.Types.Unknown6.Types.Unknown2();
              }
              input.ReadMessage(unknown2_);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Unknown6 message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Unknown2 : pb::IMessage<Unknown2> {
          private static readonly pb::MessageParser<Unknown2> _parser = new pb::MessageParser<Unknown2>(() => new Unknown2());
          public static pb::MessageParser<Unknown2> Parser { get { return _parser; } }

          public static pbr::MessageDescriptor Descriptor {
            get { return global::ResponseEnvelop.Types.Unknown6.Descriptor.NestedTypes[0]; }
          }

          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          public Unknown2() {
            OnConstruction();
          }

          partial void OnConstruction();

          public Unknown2(Unknown2 other) : this() {
            unknown1_ = other.unknown1_;
          }

          public Unknown2 Clone() {
            return new Unknown2(this);
          }

          /// <summary>Field number for the "unknown1" field.</summary>
          public const int Unknown1FieldNumber = 1;
          private pb::ByteString unknown1_ = pb::ByteString.Empty;
          public pb::ByteString Unknown1 {
            get { return unknown1_; }
            set {
              unknown1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          public override bool Equals(object other) {
            return Equals(other as Unknown2);
          }

          public bool Equals(Unknown2 other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Unknown1 != other.Unknown1) return false;
            return true;
          }

          public override int GetHashCode() {
            int hash = 1;
            if (Unknown1.Length != 0) hash ^= Unknown1.GetHashCode();
            return hash;
          }

          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          public void WriteTo(pb::CodedOutputStream output) {
            if (Unknown1.Length != 0) {
              output.WriteRawTag(10);
              output.WriteBytes(Unknown1);
            }
          }

          public int CalculateSize() {
            int size = 0;
            if (Unknown1.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unknown1);
            }
            return size;
          }

          public void MergeFrom(Unknown2 other) {
            if (other == null) {
              return;
            }
            if (other.Unknown1.Length != 0) {
              Unknown1 = other.Unknown1;
            }
          }

          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 10: {
                  Unknown1 = input.ReadBytes();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HeartbeatPayload : pb::IMessage<HeartbeatPayload> {
      private static readonly pb::MessageParser<HeartbeatPayload> _parser = new pb::MessageParser<HeartbeatPayload>(() => new HeartbeatPayload());
      public static pb::MessageParser<HeartbeatPayload> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[1]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public HeartbeatPayload() {
        OnConstruction();
      }

      partial void OnConstruction();

      public HeartbeatPayload(HeartbeatPayload other) : this() {
        cells_ = other.cells_.Clone();
      }

      public HeartbeatPayload Clone() {
        return new HeartbeatPayload(this);
      }

      /// <summary>Field number for the "cells" field.</summary>
      public const int CellsFieldNumber = 1;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.ClientMapCell> _repeated_cells_codec
          = pb::FieldCodec.ForMessage(10, global::ResponseEnvelop.Types.ClientMapCell.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.ClientMapCell> cells_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.ClientMapCell>();
      public pbc::RepeatedField<global::ResponseEnvelop.Types.ClientMapCell> Cells {
        get { return cells_; }
      }

      public override bool Equals(object other) {
        return Equals(other as HeartbeatPayload);
      }

      public bool Equals(HeartbeatPayload other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!cells_.Equals(other.cells_)) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        hash ^= cells_.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        cells_.WriteTo(output, _repeated_cells_codec);
      }

      public int CalculateSize() {
        int size = 0;
        size += cells_.CalculateSize(_repeated_cells_codec);
        return size;
      }

      public void MergeFrom(HeartbeatPayload other) {
        if (other == null) {
          return;
        }
        cells_.Add(other.cells_);
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              cells_.AddEntriesFrom(input, _repeated_cells_codec);
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ClientMapCell : pb::IMessage<ClientMapCell> {
      private static readonly pb::MessageParser<ClientMapCell> _parser = new pb::MessageParser<ClientMapCell>(() => new ClientMapCell());
      public static pb::MessageParser<ClientMapCell> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[2]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public ClientMapCell() {
        OnConstruction();
      }

      partial void OnConstruction();

      public ClientMapCell(ClientMapCell other) : this() {
        s2CellId_ = other.s2CellId_;
        asOfTimeMs_ = other.asOfTimeMs_;
        fort_ = other.fort_.Clone();
        spawnPoint_ = other.spawnPoint_.Clone();
        wildPokemon_ = other.wildPokemon_.Clone();
        isTruncatedList_ = other.isTruncatedList_;
        fortSummary_ = other.fortSummary_.Clone();
        decimatedSpawnPoint_ = other.decimatedSpawnPoint_.Clone();
        mapPokemon_ = other.mapPokemon_.Clone();
        nearbyPokemon_ = other.nearbyPokemon_.Clone();
      }

      public ClientMapCell Clone() {
        return new ClientMapCell(this);
      }

      /// <summary>Field number for the "S2CellId" field.</summary>
      public const int S2CellIdFieldNumber = 1;
      private ulong s2CellId_;
      public ulong S2CellId {
        get { return s2CellId_; }
        set {
          s2CellId_ = value;
        }
      }

      /// <summary>Field number for the "AsOfTimeMs" field.</summary>
      public const int AsOfTimeMsFieldNumber = 2;
      private long asOfTimeMs_;
      public long AsOfTimeMs {
        get { return asOfTimeMs_; }
        set {
          asOfTimeMs_ = value;
        }
      }

      /// <summary>Field number for the "Fort" field.</summary>
      public const int FortFieldNumber = 3;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.PokemonFortProto> _repeated_fort_codec
          = pb::FieldCodec.ForMessage(26, global::ResponseEnvelop.Types.PokemonFortProto.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.PokemonFortProto> fort_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.PokemonFortProto>();
      public pbc::RepeatedField<global::ResponseEnvelop.Types.PokemonFortProto> Fort {
        get { return fort_; }
      }

      /// <summary>Field number for the "SpawnPoint" field.</summary>
      public const int SpawnPointFieldNumber = 4;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.ClientSpawnPointProto> _repeated_spawnPoint_codec
          = pb::FieldCodec.ForMessage(34, global::ResponseEnvelop.Types.ClientSpawnPointProto.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.ClientSpawnPointProto> spawnPoint_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.ClientSpawnPointProto>();
      public pbc::RepeatedField<global::ResponseEnvelop.Types.ClientSpawnPointProto> SpawnPoint {
        get { return spawnPoint_; }
      }

      /// <summary>Field number for the "WildPokemon" field.</summary>
      public const int WildPokemonFieldNumber = 5;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.WildPokemonProto> _repeated_wildPokemon_codec
          = pb::FieldCodec.ForMessage(42, global::ResponseEnvelop.Types.WildPokemonProto.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.WildPokemonProto> wildPokemon_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.WildPokemonProto>();
      public pbc::RepeatedField<global::ResponseEnvelop.Types.WildPokemonProto> WildPokemon {
        get { return wildPokemon_; }
      }

      /// <summary>Field number for the "IsTruncatedList" field.</summary>
      public const int IsTruncatedListFieldNumber = 7;
      private bool isTruncatedList_;
      /// <summary>
      /// unknown DeletedObject = 6;
      /// </summary>
      public bool IsTruncatedList {
        get { return isTruncatedList_; }
        set {
          isTruncatedList_ = value;
        }
      }

      /// <summary>Field number for the "FortSummary" field.</summary>
      public const int FortSummaryFieldNumber = 8;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.PokemonSummaryFortProto> _repeated_fortSummary_codec
          = pb::FieldCodec.ForMessage(66, global::ResponseEnvelop.Types.PokemonSummaryFortProto.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.PokemonSummaryFortProto> fortSummary_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.PokemonSummaryFortProto>();
      public pbc::RepeatedField<global::ResponseEnvelop.Types.PokemonSummaryFortProto> FortSummary {
        get { return fortSummary_; }
      }

      /// <summary>Field number for the "DecimatedSpawnPoint" field.</summary>
      public const int DecimatedSpawnPointFieldNumber = 9;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.ClientSpawnPointProto> _repeated_decimatedSpawnPoint_codec
          = pb::FieldCodec.ForMessage(74, global::ResponseEnvelop.Types.ClientSpawnPointProto.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.ClientSpawnPointProto> decimatedSpawnPoint_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.ClientSpawnPointProto>();
      public pbc::RepeatedField<global::ResponseEnvelop.Types.ClientSpawnPointProto> DecimatedSpawnPoint {
        get { return decimatedSpawnPoint_; }
      }

      /// <summary>Field number for the "MapPokemon" field.</summary>
      public const int MapPokemonFieldNumber = 10;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.MapPokemonProto> _repeated_mapPokemon_codec
          = pb::FieldCodec.ForMessage(82, global::ResponseEnvelop.Types.MapPokemonProto.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.MapPokemonProto> mapPokemon_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.MapPokemonProto>();
      public pbc::RepeatedField<global::ResponseEnvelop.Types.MapPokemonProto> MapPokemon {
        get { return mapPokemon_; }
      }

      /// <summary>Field number for the "NearbyPokemon" field.</summary>
      public const int NearbyPokemonFieldNumber = 11;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.NearbyPokemonProto> _repeated_nearbyPokemon_codec
          = pb::FieldCodec.ForMessage(90, global::ResponseEnvelop.Types.NearbyPokemonProto.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.NearbyPokemonProto> nearbyPokemon_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.NearbyPokemonProto>();
      public pbc::RepeatedField<global::ResponseEnvelop.Types.NearbyPokemonProto> NearbyPokemon {
        get { return nearbyPokemon_; }
      }

      public override bool Equals(object other) {
        return Equals(other as ClientMapCell);
      }

      public bool Equals(ClientMapCell other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (S2CellId != other.S2CellId) return false;
        if (AsOfTimeMs != other.AsOfTimeMs) return false;
        if(!fort_.Equals(other.fort_)) return false;
        if(!spawnPoint_.Equals(other.spawnPoint_)) return false;
        if(!wildPokemon_.Equals(other.wildPokemon_)) return false;
        if (IsTruncatedList != other.IsTruncatedList) return false;
        if(!fortSummary_.Equals(other.fortSummary_)) return false;
        if(!decimatedSpawnPoint_.Equals(other.decimatedSpawnPoint_)) return false;
        if(!mapPokemon_.Equals(other.mapPokemon_)) return false;
        if(!nearbyPokemon_.Equals(other.nearbyPokemon_)) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (S2CellId != 0UL) hash ^= S2CellId.GetHashCode();
        if (AsOfTimeMs != 0L) hash ^= AsOfTimeMs.GetHashCode();
        hash ^= fort_.GetHashCode();
        hash ^= spawnPoint_.GetHashCode();
        hash ^= wildPokemon_.GetHashCode();
        if (IsTruncatedList != false) hash ^= IsTruncatedList.GetHashCode();
        hash ^= fortSummary_.GetHashCode();
        hash ^= decimatedSpawnPoint_.GetHashCode();
        hash ^= mapPokemon_.GetHashCode();
        hash ^= nearbyPokemon_.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (S2CellId != 0UL) {
          output.WriteRawTag(8);
          output.WriteUInt64(S2CellId);
        }
        if (AsOfTimeMs != 0L) {
          output.WriteRawTag(16);
          output.WriteInt64(AsOfTimeMs);
        }
        fort_.WriteTo(output, _repeated_fort_codec);
        spawnPoint_.WriteTo(output, _repeated_spawnPoint_codec);
        wildPokemon_.WriteTo(output, _repeated_wildPokemon_codec);
        if (IsTruncatedList != false) {
          output.WriteRawTag(56);
          output.WriteBool(IsTruncatedList);
        }
        fortSummary_.WriteTo(output, _repeated_fortSummary_codec);
        decimatedSpawnPoint_.WriteTo(output, _repeated_decimatedSpawnPoint_codec);
        mapPokemon_.WriteTo(output, _repeated_mapPokemon_codec);
        nearbyPokemon_.WriteTo(output, _repeated_nearbyPokemon_codec);
      }

      public int CalculateSize() {
        int size = 0;
        if (S2CellId != 0UL) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(S2CellId);
        }
        if (AsOfTimeMs != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(AsOfTimeMs);
        }
        size += fort_.CalculateSize(_repeated_fort_codec);
        size += spawnPoint_.CalculateSize(_repeated_spawnPoint_codec);
        size += wildPokemon_.CalculateSize(_repeated_wildPokemon_codec);
        if (IsTruncatedList != false) {
          size += 1 + 1;
        }
        size += fortSummary_.CalculateSize(_repeated_fortSummary_codec);
        size += decimatedSpawnPoint_.CalculateSize(_repeated_decimatedSpawnPoint_codec);
        size += mapPokemon_.CalculateSize(_repeated_mapPokemon_codec);
        size += nearbyPokemon_.CalculateSize(_repeated_nearbyPokemon_codec);
        return size;
      }

      public void MergeFrom(ClientMapCell other) {
        if (other == null) {
          return;
        }
        if (other.S2CellId != 0UL) {
          S2CellId = other.S2CellId;
        }
        if (other.AsOfTimeMs != 0L) {
          AsOfTimeMs = other.AsOfTimeMs;
        }
        fort_.Add(other.fort_);
        spawnPoint_.Add(other.spawnPoint_);
        wildPokemon_.Add(other.wildPokemon_);
        if (other.IsTruncatedList != false) {
          IsTruncatedList = other.IsTruncatedList;
        }
        fortSummary_.Add(other.fortSummary_);
        decimatedSpawnPoint_.Add(other.decimatedSpawnPoint_);
        mapPokemon_.Add(other.mapPokemon_);
        nearbyPokemon_.Add(other.nearbyPokemon_);
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              S2CellId = input.ReadUInt64();
              break;
            }
            case 16: {
              AsOfTimeMs = input.ReadInt64();
              break;
            }
            case 26: {
              fort_.AddEntriesFrom(input, _repeated_fort_codec);
              break;
            }
            case 34: {
              spawnPoint_.AddEntriesFrom(input, _repeated_spawnPoint_codec);
              break;
            }
            case 42: {
              wildPokemon_.AddEntriesFrom(input, _repeated_wildPokemon_codec);
              break;
            }
            case 56: {
              IsTruncatedList = input.ReadBool();
              break;
            }
            case 66: {
              fortSummary_.AddEntriesFrom(input, _repeated_fortSummary_codec);
              break;
            }
            case 74: {
              decimatedSpawnPoint_.AddEntriesFrom(input, _repeated_decimatedSpawnPoint_codec);
              break;
            }
            case 82: {
              mapPokemon_.AddEntriesFrom(input, _repeated_mapPokemon_codec);
              break;
            }
            case 90: {
              nearbyPokemon_.AddEntriesFrom(input, _repeated_nearbyPokemon_codec);
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class WildPokemon : pb::IMessage<WildPokemon> {
      private static readonly pb::MessageParser<WildPokemon> _parser = new pb::MessageParser<WildPokemon>(() => new WildPokemon());
      public static pb::MessageParser<WildPokemon> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[3]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public WildPokemon() {
        OnConstruction();
      }

      partial void OnConstruction();

      public WildPokemon(WildPokemon other) : this() {
        uniqueId_ = other.uniqueId_;
        pokemonId_ = other.pokemonId_;
        pokemon_ = other.pokemon_.Clone();
      }

      public WildPokemon Clone() {
        return new WildPokemon(this);
      }

      /// <summary>Field number for the "UniqueId" field.</summary>
      public const int UniqueIdFieldNumber = 1;
      private string uniqueId_ = "";
      public string UniqueId {
        get { return uniqueId_; }
        set {
          uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "PokemonId" field.</summary>
      public const int PokemonIdFieldNumber = 2;
      private string pokemonId_ = "";
      public string PokemonId {
        get { return pokemonId_; }
        set {
          pokemonId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "pokemon" field.</summary>
      public const int PokemonFieldNumber = 11;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.NearbyPokemonProto> _repeated_pokemon_codec
          = pb::FieldCodec.ForMessage(90, global::ResponseEnvelop.Types.NearbyPokemonProto.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.NearbyPokemonProto> pokemon_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.NearbyPokemonProto>();
      /// <summary>
      ///  int64 three = 3;
      ///  float four = 4;
      ///  int32 five = 5;
      ///  unknown six = 6;
      /// </summary>
      public pbc::RepeatedField<global::ResponseEnvelop.Types.NearbyPokemonProto> Pokemon {
        get { return pokemon_; }
      }

      public override bool Equals(object other) {
        return Equals(other as WildPokemon);
      }

      public bool Equals(WildPokemon other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (UniqueId != other.UniqueId) return false;
        if (PokemonId != other.PokemonId) return false;
        if(!pokemon_.Equals(other.pokemon_)) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (UniqueId.Length != 0) hash ^= UniqueId.GetHashCode();
        if (PokemonId.Length != 0) hash ^= PokemonId.GetHashCode();
        hash ^= pokemon_.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (UniqueId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(UniqueId);
        }
        if (PokemonId.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(PokemonId);
        }
        pokemon_.WriteTo(output, _repeated_pokemon_codec);
      }

      public int CalculateSize() {
        int size = 0;
        if (UniqueId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
        }
        if (PokemonId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(PokemonId);
        }
        size += pokemon_.CalculateSize(_repeated_pokemon_codec);
        return size;
      }

      public void MergeFrom(WildPokemon other) {
        if (other == null) {
          return;
        }
        if (other.UniqueId.Length != 0) {
          UniqueId = other.UniqueId;
        }
        if (other.PokemonId.Length != 0) {
          PokemonId = other.PokemonId;
        }
        pokemon_.Add(other.pokemon_);
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              UniqueId = input.ReadString();
              break;
            }
            case 18: {
              PokemonId = input.ReadString();
              break;
            }
            case 90: {
              pokemon_.AddEntriesFrom(input, _repeated_pokemon_codec);
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MapPokemonProto : pb::IMessage<MapPokemonProto> {
      private static readonly pb::MessageParser<MapPokemonProto> _parser = new pb::MessageParser<MapPokemonProto>(() => new MapPokemonProto());
      public static pb::MessageParser<MapPokemonProto> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[4]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public MapPokemonProto() {
        OnConstruction();
      }

      partial void OnConstruction();

      public MapPokemonProto(MapPokemonProto other) : this() {
        spawnpointId_ = other.spawnpointId_;
        encounterId_ = other.encounterId_;
        pokedexTypeId_ = other.pokedexTypeId_;
        expirationTimeMs_ = other.expirationTimeMs_;
        latitude_ = other.latitude_;
        longitude_ = other.longitude_;
      }

      public MapPokemonProto Clone() {
        return new MapPokemonProto(this);
      }

      /// <summary>Field number for the "SpawnpointId" field.</summary>
      public const int SpawnpointIdFieldNumber = 1;
      private string spawnpointId_ = "";
      public string SpawnpointId {
        get { return spawnpointId_; }
        set {
          spawnpointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "EncounterId" field.</summary>
      public const int EncounterIdFieldNumber = 2;
      private ulong encounterId_;
      public ulong EncounterId {
        get { return encounterId_; }
        set {
          encounterId_ = value;
        }
      }

      /// <summary>Field number for the "PokedexTypeId" field.</summary>
      public const int PokedexTypeIdFieldNumber = 3;
      private int pokedexTypeId_;
      public int PokedexTypeId {
        get { return pokedexTypeId_; }
        set {
          pokedexTypeId_ = value;
        }
      }

      /// <summary>Field number for the "ExpirationTimeMs" field.</summary>
      public const int ExpirationTimeMsFieldNumber = 4;
      private long expirationTimeMs_;
      public long ExpirationTimeMs {
        get { return expirationTimeMs_; }
        set {
          expirationTimeMs_ = value;
        }
      }

      /// <summary>Field number for the "Latitude" field.</summary>
      public const int LatitudeFieldNumber = 5;
      private double latitude_;
      public double Latitude {
        get { return latitude_; }
        set {
          latitude_ = value;
        }
      }

      /// <summary>Field number for the "Longitude" field.</summary>
      public const int LongitudeFieldNumber = 6;
      private double longitude_;
      public double Longitude {
        get { return longitude_; }
        set {
          longitude_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as MapPokemonProto);
      }

      public bool Equals(MapPokemonProto other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (SpawnpointId != other.SpawnpointId) return false;
        if (EncounterId != other.EncounterId) return false;
        if (PokedexTypeId != other.PokedexTypeId) return false;
        if (ExpirationTimeMs != other.ExpirationTimeMs) return false;
        if (Latitude != other.Latitude) return false;
        if (Longitude != other.Longitude) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (SpawnpointId.Length != 0) hash ^= SpawnpointId.GetHashCode();
        if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
        if (PokedexTypeId != 0) hash ^= PokedexTypeId.GetHashCode();
        if (ExpirationTimeMs != 0L) hash ^= ExpirationTimeMs.GetHashCode();
        if (Latitude != 0D) hash ^= Latitude.GetHashCode();
        if (Longitude != 0D) hash ^= Longitude.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (SpawnpointId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(SpawnpointId);
        }
        if (EncounterId != 0UL) {
          output.WriteRawTag(16);
          output.WriteUInt64(EncounterId);
        }
        if (PokedexTypeId != 0) {
          output.WriteRawTag(24);
          output.WriteInt32(PokedexTypeId);
        }
        if (ExpirationTimeMs != 0L) {
          output.WriteRawTag(32);
          output.WriteInt64(ExpirationTimeMs);
        }
        if (Latitude != 0D) {
          output.WriteRawTag(41);
          output.WriteDouble(Latitude);
        }
        if (Longitude != 0D) {
          output.WriteRawTag(49);
          output.WriteDouble(Longitude);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (SpawnpointId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(SpawnpointId);
        }
        if (EncounterId != 0UL) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EncounterId);
        }
        if (PokedexTypeId != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokedexTypeId);
        }
        if (ExpirationTimeMs != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTimeMs);
        }
        if (Latitude != 0D) {
          size += 1 + 8;
        }
        if (Longitude != 0D) {
          size += 1 + 8;
        }
        return size;
      }

      public void MergeFrom(MapPokemonProto other) {
        if (other == null) {
          return;
        }
        if (other.SpawnpointId.Length != 0) {
          SpawnpointId = other.SpawnpointId;
        }
        if (other.EncounterId != 0UL) {
          EncounterId = other.EncounterId;
        }
        if (other.PokedexTypeId != 0) {
          PokedexTypeId = other.PokedexTypeId;
        }
        if (other.ExpirationTimeMs != 0L) {
          ExpirationTimeMs = other.ExpirationTimeMs;
        }
        if (other.Latitude != 0D) {
          Latitude = other.Latitude;
        }
        if (other.Longitude != 0D) {
          Longitude = other.Longitude;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              SpawnpointId = input.ReadString();
              break;
            }
            case 16: {
              EncounterId = input.ReadUInt64();
              break;
            }
            case 24: {
              PokedexTypeId = input.ReadInt32();
              break;
            }
            case 32: {
              ExpirationTimeMs = input.ReadInt64();
              break;
            }
            case 41: {
              Latitude = input.ReadDouble();
              break;
            }
            case 49: {
              Longitude = input.ReadDouble();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PokemonFortProto : pb::IMessage<PokemonFortProto> {
      private static readonly pb::MessageParser<PokemonFortProto> _parser = new pb::MessageParser<PokemonFortProto>(() => new PokemonFortProto());
      public static pb::MessageParser<PokemonFortProto> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[5]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public PokemonFortProto() {
        OnConstruction();
      }

      partial void OnConstruction();

      public PokemonFortProto(PokemonFortProto other) : this() {
        fortId_ = other.fortId_;
        lastModifiedMs_ = other.lastModifiedMs_;
        latitude_ = other.latitude_;
        longitude_ = other.longitude_;
        team_ = other.team_;
        guardPokemonId_ = other.guardPokemonId_;
        guardPokemonLevel_ = other.guardPokemonLevel_;
        enabled_ = other.enabled_;
        fortType_ = other.fortType_;
        gymPoints_ = other.gymPoints_;
        isInBattle_ = other.isInBattle_;
        ActivePokemon = other.activePokemon_ != null ? other.ActivePokemon.Clone() : null;
        cooldownCompleteMs_ = other.cooldownCompleteMs_;
        sponsor_ = other.sponsor_;
        renderingType_ = other.renderingType_;
      }

      public PokemonFortProto Clone() {
        return new PokemonFortProto(this);
      }

      /// <summary>Field number for the "FortId" field.</summary>
      public const int FortIdFieldNumber = 1;
      private string fortId_ = "";
      public string FortId {
        get { return fortId_; }
        set {
          fortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "LastModifiedMs" field.</summary>
      public const int LastModifiedMsFieldNumber = 2;
      private long lastModifiedMs_;
      public long LastModifiedMs {
        get { return lastModifiedMs_; }
        set {
          lastModifiedMs_ = value;
        }
      }

      /// <summary>Field number for the "Latitude" field.</summary>
      public const int LatitudeFieldNumber = 3;
      private double latitude_;
      public double Latitude {
        get { return latitude_; }
        set {
          latitude_ = value;
        }
      }

      /// <summary>Field number for the "Longitude" field.</summary>
      public const int LongitudeFieldNumber = 4;
      private double longitude_;
      public double Longitude {
        get { return longitude_; }
        set {
          longitude_ = value;
        }
      }

      /// <summary>Field number for the "Team" field.</summary>
      public const int TeamFieldNumber = 5;
      private int team_;
      public int Team {
        get { return team_; }
        set {
          team_ = value;
        }
      }

      /// <summary>Field number for the "GuardPokemonId" field.</summary>
      public const int GuardPokemonIdFieldNumber = 6;
      private int guardPokemonId_;
      public int GuardPokemonId {
        get { return guardPokemonId_; }
        set {
          guardPokemonId_ = value;
        }
      }

      /// <summary>Field number for the "GuardPokemonLevel" field.</summary>
      public const int GuardPokemonLevelFieldNumber = 7;
      private int guardPokemonLevel_;
      public int GuardPokemonLevel {
        get { return guardPokemonLevel_; }
        set {
          guardPokemonLevel_ = value;
        }
      }

      /// <summary>Field number for the "Enabled" field.</summary>
      public const int EnabledFieldNumber = 8;
      private bool enabled_;
      public bool Enabled {
        get { return enabled_; }
        set {
          enabled_ = value;
        }
      }

      /// <summary>Field number for the "FortType" field.</summary>
      public const int FortTypeFieldNumber = 9;
      private int fortType_;
      /// <summary>
      ///  ENUM.Holoholo.Rpc.FortType FortType = 9;
      /// </summary>
      public int FortType {
        get { return fortType_; }
        set {
          fortType_ = value;
        }
      }

      /// <summary>Field number for the "GymPoints" field.</summary>
      public const int GymPointsFieldNumber = 10;
      private long gymPoints_;
      public long GymPoints {
        get { return gymPoints_; }
        set {
          gymPoints_ = value;
        }
      }

      /// <summary>Field number for the "IsInBattle" field.</summary>
      public const int IsInBattleFieldNumber = 11;
      private bool isInBattle_;
      public bool IsInBattle {
        get { return isInBattle_; }
        set {
          isInBattle_ = value;
        }
      }

      /// <summary>Field number for the "ActivePokemon" field.</summary>
      public const int ActivePokemonFieldNumber = 13;
      private global::ResponseEnvelop.Types.MapPokemonProto activePokemon_;
      /// <summary>
      /// unknown ActiveFortModifier = 12;
      /// </summary>
      public global::ResponseEnvelop.Types.MapPokemonProto ActivePokemon {
        get { return activePokemon_; }
        set {
          activePokemon_ = value;
        }
      }

      /// <summary>Field number for the "CooldownCompleteMs" field.</summary>
      public const int CooldownCompleteMsFieldNumber = 14;
      private long cooldownCompleteMs_;
      public long CooldownCompleteMs {
        get { return cooldownCompleteMs_; }
        set {
          cooldownCompleteMs_ = value;
        }
      }

      /// <summary>Field number for the "Sponsor" field.</summary>
      public const int SponsorFieldNumber = 15;
      private int sponsor_;
      /// <summary>
      ///  ENUM.Holoholo.Rpc.Sponsor.Types.FortSponsor.Sponsor Sponsor = 15;
      /// </summary>
      public int Sponsor {
        get { return sponsor_; }
        set {
          sponsor_ = value;
        }
      }

      /// <summary>Field number for the "RenderingType" field.</summary>
      public const int RenderingTypeFieldNumber = 16;
      private int renderingType_;
      /// <summary>
      ///  ENUM.Holoholo.Rpc.RenderingType.Types.FortRenderingType.RenderingType RenderingType = 16;
      /// </summary>
      public int RenderingType {
        get { return renderingType_; }
        set {
          renderingType_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as PokemonFortProto);
      }

      public bool Equals(PokemonFortProto other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (FortId != other.FortId) return false;
        if (LastModifiedMs != other.LastModifiedMs) return false;
        if (Latitude != other.Latitude) return false;
        if (Longitude != other.Longitude) return false;
        if (Team != other.Team) return false;
        if (GuardPokemonId != other.GuardPokemonId) return false;
        if (GuardPokemonLevel != other.GuardPokemonLevel) return false;
        if (Enabled != other.Enabled) return false;
        if (FortType != other.FortType) return false;
        if (GymPoints != other.GymPoints) return false;
        if (IsInBattle != other.IsInBattle) return false;
        if (!object.Equals(ActivePokemon, other.ActivePokemon)) return false;
        if (CooldownCompleteMs != other.CooldownCompleteMs) return false;
        if (Sponsor != other.Sponsor) return false;
        if (RenderingType != other.RenderingType) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (FortId.Length != 0) hash ^= FortId.GetHashCode();
        if (LastModifiedMs != 0L) hash ^= LastModifiedMs.GetHashCode();
        if (Latitude != 0D) hash ^= Latitude.GetHashCode();
        if (Longitude != 0D) hash ^= Longitude.GetHashCode();
        if (Team != 0) hash ^= Team.GetHashCode();
        if (GuardPokemonId != 0) hash ^= GuardPokemonId.GetHashCode();
        if (GuardPokemonLevel != 0) hash ^= GuardPokemonLevel.GetHashCode();
        if (Enabled != false) hash ^= Enabled.GetHashCode();
        if (FortType != 0) hash ^= FortType.GetHashCode();
        if (GymPoints != 0L) hash ^= GymPoints.GetHashCode();
        if (IsInBattle != false) hash ^= IsInBattle.GetHashCode();
        if (activePokemon_ != null) hash ^= ActivePokemon.GetHashCode();
        if (CooldownCompleteMs != 0L) hash ^= CooldownCompleteMs.GetHashCode();
        if (Sponsor != 0) hash ^= Sponsor.GetHashCode();
        if (RenderingType != 0) hash ^= RenderingType.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (FortId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(FortId);
        }
        if (LastModifiedMs != 0L) {
          output.WriteRawTag(16);
          output.WriteInt64(LastModifiedMs);
        }
        if (Latitude != 0D) {
          output.WriteRawTag(25);
          output.WriteDouble(Latitude);
        }
        if (Longitude != 0D) {
          output.WriteRawTag(33);
          output.WriteDouble(Longitude);
        }
        if (Team != 0) {
          output.WriteRawTag(40);
          output.WriteInt32(Team);
        }
        if (GuardPokemonId != 0) {
          output.WriteRawTag(48);
          output.WriteInt32(GuardPokemonId);
        }
        if (GuardPokemonLevel != 0) {
          output.WriteRawTag(56);
          output.WriteInt32(GuardPokemonLevel);
        }
        if (Enabled != false) {
          output.WriteRawTag(64);
          output.WriteBool(Enabled);
        }
        if (FortType != 0) {
          output.WriteRawTag(72);
          output.WriteInt32(FortType);
        }
        if (GymPoints != 0L) {
          output.WriteRawTag(80);
          output.WriteInt64(GymPoints);
        }
        if (IsInBattle != false) {
          output.WriteRawTag(88);
          output.WriteBool(IsInBattle);
        }
        if (activePokemon_ != null) {
          output.WriteRawTag(106);
          output.WriteMessage(ActivePokemon);
        }
        if (CooldownCompleteMs != 0L) {
          output.WriteRawTag(112);
          output.WriteInt64(CooldownCompleteMs);
        }
        if (Sponsor != 0) {
          output.WriteRawTag(120);
          output.WriteInt32(Sponsor);
        }
        if (RenderingType != 0) {
          output.WriteRawTag(128, 1);
          output.WriteInt32(RenderingType);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (FortId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
        }
        if (LastModifiedMs != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedMs);
        }
        if (Latitude != 0D) {
          size += 1 + 8;
        }
        if (Longitude != 0D) {
          size += 1 + 8;
        }
        if (Team != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
        }
        if (GuardPokemonId != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuardPokemonId);
        }
        if (GuardPokemonLevel != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuardPokemonLevel);
        }
        if (Enabled != false) {
          size += 1 + 1;
        }
        if (FortType != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(FortType);
        }
        if (GymPoints != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(GymPoints);
        }
        if (IsInBattle != false) {
          size += 1 + 1;
        }
        if (activePokemon_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivePokemon);
        }
        if (CooldownCompleteMs != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(CooldownCompleteMs);
        }
        if (Sponsor != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sponsor);
        }
        if (RenderingType != 0) {
          size += 2 + pb::CodedOutputStream.ComputeInt32Size(RenderingType);
        }
        return size;
      }

      public void MergeFrom(PokemonFortProto other) {
        if (other == null) {
          return;
        }
        if (other.FortId.Length != 0) {
          FortId = other.FortId;
        }
        if (other.LastModifiedMs != 0L) {
          LastModifiedMs = other.LastModifiedMs;
        }
        if (other.Latitude != 0D) {
          Latitude = other.Latitude;
        }
        if (other.Longitude != 0D) {
          Longitude = other.Longitude;
        }
        if (other.Team != 0) {
          Team = other.Team;
        }
        if (other.GuardPokemonId != 0) {
          GuardPokemonId = other.GuardPokemonId;
        }
        if (other.GuardPokemonLevel != 0) {
          GuardPokemonLevel = other.GuardPokemonLevel;
        }
        if (other.Enabled != false) {
          Enabled = other.Enabled;
        }
        if (other.FortType != 0) {
          FortType = other.FortType;
        }
        if (other.GymPoints != 0L) {
          GymPoints = other.GymPoints;
        }
        if (other.IsInBattle != false) {
          IsInBattle = other.IsInBattle;
        }
        if (other.activePokemon_ != null) {
          if (activePokemon_ == null) {
            activePokemon_ = new global::ResponseEnvelop.Types.MapPokemonProto();
          }
          ActivePokemon.MergeFrom(other.ActivePokemon);
        }
        if (other.CooldownCompleteMs != 0L) {
          CooldownCompleteMs = other.CooldownCompleteMs;
        }
        if (other.Sponsor != 0) {
          Sponsor = other.Sponsor;
        }
        if (other.RenderingType != 0) {
          RenderingType = other.RenderingType;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              FortId = input.ReadString();
              break;
            }
            case 16: {
              LastModifiedMs = input.ReadInt64();
              break;
            }
            case 25: {
              Latitude = input.ReadDouble();
              break;
            }
            case 33: {
              Longitude = input.ReadDouble();
              break;
            }
            case 40: {
              Team = input.ReadInt32();
              break;
            }
            case 48: {
              GuardPokemonId = input.ReadInt32();
              break;
            }
            case 56: {
              GuardPokemonLevel = input.ReadInt32();
              break;
            }
            case 64: {
              Enabled = input.ReadBool();
              break;
            }
            case 72: {
              FortType = input.ReadInt32();
              break;
            }
            case 80: {
              GymPoints = input.ReadInt64();
              break;
            }
            case 88: {
              IsInBattle = input.ReadBool();
              break;
            }
            case 106: {
              if (activePokemon_ == null) {
                activePokemon_ = new global::ResponseEnvelop.Types.MapPokemonProto();
              }
              input.ReadMessage(activePokemon_);
              break;
            }
            case 112: {
              CooldownCompleteMs = input.ReadInt64();
              break;
            }
            case 120: {
              Sponsor = input.ReadInt32();
              break;
            }
            case 128: {
              RenderingType = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PokemonSummaryFortProto : pb::IMessage<PokemonSummaryFortProto> {
      private static readonly pb::MessageParser<PokemonSummaryFortProto> _parser = new pb::MessageParser<PokemonSummaryFortProto>(() => new PokemonSummaryFortProto());
      public static pb::MessageParser<PokemonSummaryFortProto> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[6]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public PokemonSummaryFortProto() {
        OnConstruction();
      }

      partial void OnConstruction();

      public PokemonSummaryFortProto(PokemonSummaryFortProto other) : this() {
        fortSummaryId_ = other.fortSummaryId_;
        lastModifiedMs_ = other.lastModifiedMs_;
        latitude_ = other.latitude_;
        longitude_ = other.longitude_;
      }

      public PokemonSummaryFortProto Clone() {
        return new PokemonSummaryFortProto(this);
      }

      /// <summary>Field number for the "FortSummaryId" field.</summary>
      public const int FortSummaryIdFieldNumber = 1;
      private string fortSummaryId_ = "";
      public string FortSummaryId {
        get { return fortSummaryId_; }
        set {
          fortSummaryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "LastModifiedMs" field.</summary>
      public const int LastModifiedMsFieldNumber = 2;
      private long lastModifiedMs_;
      public long LastModifiedMs {
        get { return lastModifiedMs_; }
        set {
          lastModifiedMs_ = value;
        }
      }

      /// <summary>Field number for the "Latitude" field.</summary>
      public const int LatitudeFieldNumber = 3;
      private double latitude_;
      public double Latitude {
        get { return latitude_; }
        set {
          latitude_ = value;
        }
      }

      /// <summary>Field number for the "Longitude" field.</summary>
      public const int LongitudeFieldNumber = 4;
      private double longitude_;
      public double Longitude {
        get { return longitude_; }
        set {
          longitude_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as PokemonSummaryFortProto);
      }

      public bool Equals(PokemonSummaryFortProto other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (FortSummaryId != other.FortSummaryId) return false;
        if (LastModifiedMs != other.LastModifiedMs) return false;
        if (Latitude != other.Latitude) return false;
        if (Longitude != other.Longitude) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (FortSummaryId.Length != 0) hash ^= FortSummaryId.GetHashCode();
        if (LastModifiedMs != 0L) hash ^= LastModifiedMs.GetHashCode();
        if (Latitude != 0D) hash ^= Latitude.GetHashCode();
        if (Longitude != 0D) hash ^= Longitude.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (FortSummaryId.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(FortSummaryId);
        }
        if (LastModifiedMs != 0L) {
          output.WriteRawTag(16);
          output.WriteInt64(LastModifiedMs);
        }
        if (Latitude != 0D) {
          output.WriteRawTag(25);
          output.WriteDouble(Latitude);
        }
        if (Longitude != 0D) {
          output.WriteRawTag(33);
          output.WriteDouble(Longitude);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (FortSummaryId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(FortSummaryId);
        }
        if (LastModifiedMs != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedMs);
        }
        if (Latitude != 0D) {
          size += 1 + 8;
        }
        if (Longitude != 0D) {
          size += 1 + 8;
        }
        return size;
      }

      public void MergeFrom(PokemonSummaryFortProto other) {
        if (other == null) {
          return;
        }
        if (other.FortSummaryId.Length != 0) {
          FortSummaryId = other.FortSummaryId;
        }
        if (other.LastModifiedMs != 0L) {
          LastModifiedMs = other.LastModifiedMs;
        }
        if (other.Latitude != 0D) {
          Latitude = other.Latitude;
        }
        if (other.Longitude != 0D) {
          Longitude = other.Longitude;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              FortSummaryId = input.ReadString();
              break;
            }
            case 16: {
              LastModifiedMs = input.ReadInt64();
              break;
            }
            case 25: {
              Latitude = input.ReadDouble();
              break;
            }
            case 33: {
              Longitude = input.ReadDouble();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ClientSpawnPointProto : pb::IMessage<ClientSpawnPointProto> {
      private static readonly pb::MessageParser<ClientSpawnPointProto> _parser = new pb::MessageParser<ClientSpawnPointProto>(() => new ClientSpawnPointProto());
      public static pb::MessageParser<ClientSpawnPointProto> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[7]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public ClientSpawnPointProto() {
        OnConstruction();
      }

      partial void OnConstruction();

      public ClientSpawnPointProto(ClientSpawnPointProto other) : this() {
        latitude_ = other.latitude_;
        longitude_ = other.longitude_;
      }

      public ClientSpawnPointProto Clone() {
        return new ClientSpawnPointProto(this);
      }

      /// <summary>Field number for the "Latitude" field.</summary>
      public const int LatitudeFieldNumber = 2;
      private double latitude_;
      public double Latitude {
        get { return latitude_; }
        set {
          latitude_ = value;
        }
      }

      /// <summary>Field number for the "Longitude" field.</summary>
      public const int LongitudeFieldNumber = 3;
      private double longitude_;
      public double Longitude {
        get { return longitude_; }
        set {
          longitude_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as ClientSpawnPointProto);
      }

      public bool Equals(ClientSpawnPointProto other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Latitude != other.Latitude) return false;
        if (Longitude != other.Longitude) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Latitude != 0D) hash ^= Latitude.GetHashCode();
        if (Longitude != 0D) hash ^= Longitude.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Latitude != 0D) {
          output.WriteRawTag(17);
          output.WriteDouble(Latitude);
        }
        if (Longitude != 0D) {
          output.WriteRawTag(25);
          output.WriteDouble(Longitude);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Latitude != 0D) {
          size += 1 + 8;
        }
        if (Longitude != 0D) {
          size += 1 + 8;
        }
        return size;
      }

      public void MergeFrom(ClientSpawnPointProto other) {
        if (other == null) {
          return;
        }
        if (other.Latitude != 0D) {
          Latitude = other.Latitude;
        }
        if (other.Longitude != 0D) {
          Longitude = other.Longitude;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 17: {
              Latitude = input.ReadDouble();
              break;
            }
            case 25: {
              Longitude = input.ReadDouble();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class WildPokemonProto : pb::IMessage<WildPokemonProto> {
      private static readonly pb::MessageParser<WildPokemonProto> _parser = new pb::MessageParser<WildPokemonProto>(() => new WildPokemonProto());
      public static pb::MessageParser<WildPokemonProto> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[8]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public WildPokemonProto() {
        OnConstruction();
      }

      partial void OnConstruction();

      public WildPokemonProto(WildPokemonProto other) : this() {
        encounterId_ = other.encounterId_;
        lastModifiedMs_ = other.lastModifiedMs_;
        latitude_ = other.latitude_;
        longitude_ = other.longitude_;
        spawnPointId_ = other.spawnPointId_;
        Pokemon = other.pokemon_ != null ? other.Pokemon.Clone() : null;
        timeTillHiddenMs_ = other.timeTillHiddenMs_;
      }

      public WildPokemonProto Clone() {
        return new WildPokemonProto(this);
      }

      /// <summary>Field number for the "EncounterId" field.</summary>
      public const int EncounterIdFieldNumber = 1;
      private ulong encounterId_;
      public ulong EncounterId {
        get { return encounterId_; }
        set {
          encounterId_ = value;
        }
      }

      /// <summary>Field number for the "LastModifiedMs" field.</summary>
      public const int LastModifiedMsFieldNumber = 2;
      private long lastModifiedMs_;
      public long LastModifiedMs {
        get { return lastModifiedMs_; }
        set {
          lastModifiedMs_ = value;
        }
      }

      /// <summary>Field number for the "Latitude" field.</summary>
      public const int LatitudeFieldNumber = 3;
      private double latitude_;
      public double Latitude {
        get { return latitude_; }
        set {
          latitude_ = value;
        }
      }

      /// <summary>Field number for the "Longitude" field.</summary>
      public const int LongitudeFieldNumber = 4;
      private double longitude_;
      public double Longitude {
        get { return longitude_; }
        set {
          longitude_ = value;
        }
      }

      /// <summary>Field number for the "SpawnPointId" field.</summary>
      public const int SpawnPointIdFieldNumber = 5;
      private string spawnPointId_ = "";
      public string SpawnPointId {
        get { return spawnPointId_; }
        set {
          spawnPointId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "pokemon" field.</summary>
      public const int PokemonFieldNumber = 7;
      private global::ResponseEnvelop.Types.WildPokemonProto.Types.Pokemon pokemon_;
      public global::ResponseEnvelop.Types.WildPokemonProto.Types.Pokemon Pokemon {
        get { return pokemon_; }
        set {
          pokemon_ = value;
        }
      }

      /// <summary>Field number for the "TimeTillHiddenMs" field.</summary>
      public const int TimeTillHiddenMsFieldNumber = 11;
      private int timeTillHiddenMs_;
      public int TimeTillHiddenMs {
        get { return timeTillHiddenMs_; }
        set {
          timeTillHiddenMs_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as WildPokemonProto);
      }

      public bool Equals(WildPokemonProto other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (EncounterId != other.EncounterId) return false;
        if (LastModifiedMs != other.LastModifiedMs) return false;
        if (Latitude != other.Latitude) return false;
        if (Longitude != other.Longitude) return false;
        if (SpawnPointId != other.SpawnPointId) return false;
        if (!object.Equals(Pokemon, other.Pokemon)) return false;
        if (TimeTillHiddenMs != other.TimeTillHiddenMs) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
        if (LastModifiedMs != 0L) hash ^= LastModifiedMs.GetHashCode();
        if (Latitude != 0D) hash ^= Latitude.GetHashCode();
        if (Longitude != 0D) hash ^= Longitude.GetHashCode();
        if (SpawnPointId.Length != 0) hash ^= SpawnPointId.GetHashCode();
        if (pokemon_ != null) hash ^= Pokemon.GetHashCode();
        if (TimeTillHiddenMs != 0) hash ^= TimeTillHiddenMs.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (EncounterId != 0UL) {
          output.WriteRawTag(8);
          output.WriteUInt64(EncounterId);
        }
        if (LastModifiedMs != 0L) {
          output.WriteRawTag(16);
          output.WriteInt64(LastModifiedMs);
        }
        if (Latitude != 0D) {
          output.WriteRawTag(25);
          output.WriteDouble(Latitude);
        }
        if (Longitude != 0D) {
          output.WriteRawTag(33);
          output.WriteDouble(Longitude);
        }
        if (SpawnPointId.Length != 0) {
          output.WriteRawTag(42);
          output.WriteString(SpawnPointId);
        }
        if (pokemon_ != null) {
          output.WriteRawTag(58);
          output.WriteMessage(Pokemon);
        }
        if (TimeTillHiddenMs != 0) {
          output.WriteRawTag(88);
          output.WriteInt32(TimeTillHiddenMs);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (EncounterId != 0UL) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EncounterId);
        }
        if (LastModifiedMs != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedMs);
        }
        if (Latitude != 0D) {
          size += 1 + 8;
        }
        if (Longitude != 0D) {
          size += 1 + 8;
        }
        if (SpawnPointId.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(SpawnPointId);
        }
        if (pokemon_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pokemon);
        }
        if (TimeTillHiddenMs != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeTillHiddenMs);
        }
        return size;
      }

      public void MergeFrom(WildPokemonProto other) {
        if (other == null) {
          return;
        }
        if (other.EncounterId != 0UL) {
          EncounterId = other.EncounterId;
        }
        if (other.LastModifiedMs != 0L) {
          LastModifiedMs = other.LastModifiedMs;
        }
        if (other.Latitude != 0D) {
          Latitude = other.Latitude;
        }
        if (other.Longitude != 0D) {
          Longitude = other.Longitude;
        }
        if (other.SpawnPointId.Length != 0) {
          SpawnPointId = other.SpawnPointId;
        }
        if (other.pokemon_ != null) {
          if (pokemon_ == null) {
            pokemon_ = new global::ResponseEnvelop.Types.WildPokemonProto.Types.Pokemon();
          }
          Pokemon.MergeFrom(other.Pokemon);
        }
        if (other.TimeTillHiddenMs != 0) {
          TimeTillHiddenMs = other.TimeTillHiddenMs;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              EncounterId = input.ReadUInt64();
              break;
            }
            case 16: {
              LastModifiedMs = input.ReadInt64();
              break;
            }
            case 25: {
              Latitude = input.ReadDouble();
              break;
            }
            case 33: {
              Longitude = input.ReadDouble();
              break;
            }
            case 42: {
              SpawnPointId = input.ReadString();
              break;
            }
            case 58: {
              if (pokemon_ == null) {
                pokemon_ = new global::ResponseEnvelop.Types.WildPokemonProto.Types.Pokemon();
              }
              input.ReadMessage(pokemon_);
              break;
            }
            case 88: {
              TimeTillHiddenMs = input.ReadInt32();
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the WildPokemonProto message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Pokemon : pb::IMessage<Pokemon> {
          private static readonly pb::MessageParser<Pokemon> _parser = new pb::MessageParser<Pokemon>(() => new Pokemon());
          public static pb::MessageParser<Pokemon> Parser { get { return _parser; } }

          public static pbr::MessageDescriptor Descriptor {
            get { return global::ResponseEnvelop.Types.WildPokemonProto.Descriptor.NestedTypes[0]; }
          }

          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          public Pokemon() {
            OnConstruction();
          }

          partial void OnConstruction();

          public Pokemon(Pokemon other) : this() {
            id_ = other.id_;
            pokemonId_ = other.pokemonId_;
          }

          public Pokemon Clone() {
            return new Pokemon(this);
          }

          /// <summary>Field number for the "Id" field.</summary>
          public const int IdFieldNumber = 1;
          private ulong id_;
          public ulong Id {
            get { return id_; }
            set {
              id_ = value;
            }
          }

          /// <summary>Field number for the "PokemonId" field.</summary>
          public const int PokemonIdFieldNumber = 2;
          private int pokemonId_;
          public int PokemonId {
            get { return pokemonId_; }
            set {
              pokemonId_ = value;
            }
          }

          public override bool Equals(object other) {
            return Equals(other as Pokemon);
          }

          public bool Equals(Pokemon other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Id != other.Id) return false;
            if (PokemonId != other.PokemonId) return false;
            return true;
          }

          public override int GetHashCode() {
            int hash = 1;
            if (Id != 0UL) hash ^= Id.GetHashCode();
            if (PokemonId != 0) hash ^= PokemonId.GetHashCode();
            return hash;
          }

          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          public void WriteTo(pb::CodedOutputStream output) {
            if (Id != 0UL) {
              output.WriteRawTag(8);
              output.WriteUInt64(Id);
            }
            if (PokemonId != 0) {
              output.WriteRawTag(16);
              output.WriteInt32(PokemonId);
            }
          }

          public int CalculateSize() {
            int size = 0;
            if (Id != 0UL) {
              size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
            }
            if (PokemonId != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokemonId);
            }
            return size;
          }

          public void MergeFrom(Pokemon other) {
            if (other == null) {
              return;
            }
            if (other.Id != 0UL) {
              Id = other.Id;
            }
            if (other.PokemonId != 0) {
              PokemonId = other.PokemonId;
            }
          }

          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 8: {
                  Id = input.ReadUInt64();
                  break;
                }
                case 16: {
                  PokemonId = input.ReadInt32();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NearbyPokemonProto : pb::IMessage<NearbyPokemonProto> {
      private static readonly pb::MessageParser<NearbyPokemonProto> _parser = new pb::MessageParser<NearbyPokemonProto>(() => new NearbyPokemonProto());
      public static pb::MessageParser<NearbyPokemonProto> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[9]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public NearbyPokemonProto() {
        OnConstruction();
      }

      partial void OnConstruction();

      public NearbyPokemonProto(NearbyPokemonProto other) : this() {
        pokedexNumber_ = other.pokedexNumber_;
        distanceMeters_ = other.distanceMeters_;
        encounterId_ = other.encounterId_;
      }

      public NearbyPokemonProto Clone() {
        return new NearbyPokemonProto(this);
      }

      /// <summary>Field number for the "PokedexNumber" field.</summary>
      public const int PokedexNumberFieldNumber = 1;
      private int pokedexNumber_;
      public int PokedexNumber {
        get { return pokedexNumber_; }
        set {
          pokedexNumber_ = value;
        }
      }

      /// <summary>Field number for the "DistanceMeters" field.</summary>
      public const int DistanceMetersFieldNumber = 2;
      private float distanceMeters_;
      public float DistanceMeters {
        get { return distanceMeters_; }
        set {
          distanceMeters_ = value;
        }
      }

      /// <summary>Field number for the "EncounterId" field.</summary>
      public const int EncounterIdFieldNumber = 3;
      private ulong encounterId_;
      public ulong EncounterId {
        get { return encounterId_; }
        set {
          encounterId_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as NearbyPokemonProto);
      }

      public bool Equals(NearbyPokemonProto other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (PokedexNumber != other.PokedexNumber) return false;
        if (DistanceMeters != other.DistanceMeters) return false;
        if (EncounterId != other.EncounterId) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (PokedexNumber != 0) hash ^= PokedexNumber.GetHashCode();
        if (DistanceMeters != 0F) hash ^= DistanceMeters.GetHashCode();
        if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (PokedexNumber != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(PokedexNumber);
        }
        if (DistanceMeters != 0F) {
          output.WriteRawTag(21);
          output.WriteFloat(DistanceMeters);
        }
        if (EncounterId != 0UL) {
          output.WriteRawTag(24);
          output.WriteUInt64(EncounterId);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (PokedexNumber != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokedexNumber);
        }
        if (DistanceMeters != 0F) {
          size += 1 + 4;
        }
        if (EncounterId != 0UL) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EncounterId);
        }
        return size;
      }

      public void MergeFrom(NearbyPokemonProto other) {
        if (other == null) {
          return;
        }
        if (other.PokedexNumber != 0) {
          PokedexNumber = other.PokedexNumber;
        }
        if (other.DistanceMeters != 0F) {
          DistanceMeters = other.DistanceMeters;
        }
        if (other.EncounterId != 0UL) {
          EncounterId = other.EncounterId;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              PokedexNumber = input.ReadInt32();
              break;
            }
            case 21: {
              DistanceMeters = input.ReadFloat();
              break;
            }
            case 24: {
              EncounterId = input.ReadUInt64();
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ProfilePayload : pb::IMessage<ProfilePayload> {
      private static readonly pb::MessageParser<ProfilePayload> _parser = new pb::MessageParser<ProfilePayload>(() => new ProfilePayload());
      public static pb::MessageParser<ProfilePayload> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[10]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public ProfilePayload() {
        OnConstruction();
      }

      partial void OnConstruction();

      public ProfilePayload(ProfilePayload other) : this() {
        unknown1_ = other.unknown1_;
        Profile = other.profile_ != null ? other.Profile.Clone() : null;
      }

      public ProfilePayload Clone() {
        return new ProfilePayload(this);
      }

      /// <summary>Field number for the "unknown1" field.</summary>
      public const int Unknown1FieldNumber = 1;
      private int unknown1_;
      public int Unknown1 {
        get { return unknown1_; }
        set {
          unknown1_ = value;
        }
      }

      /// <summary>Field number for the "profile" field.</summary>
      public const int ProfileFieldNumber = 2;
      private global::ResponseEnvelop.Types.Profile profile_;
      public global::ResponseEnvelop.Types.Profile Profile {
        get { return profile_; }
        set {
          profile_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as ProfilePayload);
      }

      public bool Equals(ProfilePayload other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Unknown1 != other.Unknown1) return false;
        if (!object.Equals(Profile, other.Profile)) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Unknown1 != 0) hash ^= Unknown1.GetHashCode();
        if (profile_ != null) hash ^= Profile.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Unknown1 != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(Unknown1);
        }
        if (profile_ != null) {
          output.WriteRawTag(18);
          output.WriteMessage(Profile);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Unknown1 != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown1);
        }
        if (profile_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
        }
        return size;
      }

      public void MergeFrom(ProfilePayload other) {
        if (other == null) {
          return;
        }
        if (other.Unknown1 != 0) {
          Unknown1 = other.Unknown1;
        }
        if (other.profile_ != null) {
          if (profile_ == null) {
            profile_ = new global::ResponseEnvelop.Types.Profile();
          }
          Profile.MergeFrom(other.Profile);
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              Unknown1 = input.ReadInt32();
              break;
            }
            case 18: {
              if (profile_ == null) {
                profile_ = new global::ResponseEnvelop.Types.Profile();
              }
              input.ReadMessage(profile_);
              break;
            }
          }
        }
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Profile : pb::IMessage<Profile> {
      private static readonly pb::MessageParser<Profile> _parser = new pb::MessageParser<Profile>(() => new Profile());
      public static pb::MessageParser<Profile> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::ResponseEnvelop.Descriptor.NestedTypes[11]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public Profile() {
        OnConstruction();
      }

      partial void OnConstruction();

      public Profile(Profile other) : this() {
        creationTime_ = other.creationTime_;
        username_ = other.username_;
        team_ = other.team_;
        tutorial_ = other.tutorial_;
        Avatar = other.avatar_ != null ? other.Avatar.Clone() : null;
        pokeStorage_ = other.pokeStorage_;
        itemStorage_ = other.itemStorage_;
        unknown11_ = other.unknown11_;
        unknown12_ = other.unknown12_;
        unknown13_ = other.unknown13_;
        currency_ = other.currency_.Clone();
      }

      public Profile Clone() {
        return new Profile(this);
      }

      /// <summary>Field number for the "creation_time" field.</summary>
      public const int CreationTimeFieldNumber = 1;
      private long creationTime_;
      public long CreationTime {
        get { return creationTime_; }
        set {
          creationTime_ = value;
        }
      }

      /// <summary>Field number for the "username" field.</summary>
      public const int UsernameFieldNumber = 2;
      private string username_ = "";
      public string Username {
        get { return username_; }
        set {
          username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "team" field.</summary>
      public const int TeamFieldNumber = 5;
      private int team_;
      public int Team {
        get { return team_; }
        set {
          team_ = value;
        }
      }

      /// <summary>Field number for the "tutorial" field.</summary>
      public const int TutorialFieldNumber = 7;
      private pb::ByteString tutorial_ = pb::ByteString.Empty;
      public pb::ByteString Tutorial {
        get { return tutorial_; }
        set {
          tutorial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "avatar" field.</summary>
      public const int AvatarFieldNumber = 8;
      private global::ResponseEnvelop.Types.Profile.Types.AvatarDetails avatar_;
      public global::ResponseEnvelop.Types.Profile.Types.AvatarDetails Avatar {
        get { return avatar_; }
        set {
          avatar_ = value;
        }
      }

      /// <summary>Field number for the "poke_storage" field.</summary>
      public const int PokeStorageFieldNumber = 9;
      private int pokeStorage_;
      public int PokeStorage {
        get { return pokeStorage_; }
        set {
          pokeStorage_ = value;
        }
      }

      /// <summary>Field number for the "item_storage" field.</summary>
      public const int ItemStorageFieldNumber = 10;
      private int itemStorage_;
      public int ItemStorage {
        get { return itemStorage_; }
        set {
          itemStorage_ = value;
        }
      }

      /// <summary>Field number for the "unknown11" field.</summary>
      public const int Unknown11FieldNumber = 11;
      private string unknown11_ = "";
      public string Unknown11 {
        get { return unknown11_; }
        set {
          unknown11_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "unknown12" field.</summary>
      public const int Unknown12FieldNumber = 12;
      private string unknown12_ = "";
      public string Unknown12 {
        get { return unknown12_; }
        set {
          unknown12_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "unknown13" field.</summary>
      public const int Unknown13FieldNumber = 13;
      private string unknown13_ = "";
      public string Unknown13 {
        get { return unknown13_; }
        set {
          unknown13_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "currency" field.</summary>
      public const int CurrencyFieldNumber = 14;
      private static readonly pb::FieldCodec<global::ResponseEnvelop.Types.Profile.Types.Currency> _repeated_currency_codec
          = pb::FieldCodec.ForMessage(114, global::ResponseEnvelop.Types.Profile.Types.Currency.Parser);
      private readonly pbc::RepeatedField<global::ResponseEnvelop.Types.Profile.Types.Currency> currency_ = new pbc::RepeatedField<global::ResponseEnvelop.Types.Profile.Types.Currency>();
      public pbc::RepeatedField<global::ResponseEnvelop.Types.Profile.Types.Currency> Currency {
        get { return currency_; }
      }

      public override bool Equals(object other) {
        return Equals(other as Profile);
      }

      public bool Equals(Profile other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (CreationTime != other.CreationTime) return false;
        if (Username != other.Username) return false;
        if (Team != other.Team) return false;
        if (Tutorial != other.Tutorial) return false;
        if (!object.Equals(Avatar, other.Avatar)) return false;
        if (PokeStorage != other.PokeStorage) return false;
        if (ItemStorage != other.ItemStorage) return false;
        if (Unknown11 != other.Unknown11) return false;
        if (Unknown12 != other.Unknown12) return false;
        if (Unknown13 != other.Unknown13) return false;
        if(!currency_.Equals(other.currency_)) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (CreationTime != 0L) hash ^= CreationTime.GetHashCode();
        if (Username.Length != 0) hash ^= Username.GetHashCode();
        if (Team != 0) hash ^= Team.GetHashCode();
        if (Tutorial.Length != 0) hash ^= Tutorial.GetHashCode();
        if (avatar_ != null) hash ^= Avatar.GetHashCode();
        if (PokeStorage != 0) hash ^= PokeStorage.GetHashCode();
        if (ItemStorage != 0) hash ^= ItemStorage.GetHashCode();
        if (Unknown11.Length != 0) hash ^= Unknown11.GetHashCode();
        if (Unknown12.Length != 0) hash ^= Unknown12.GetHashCode();
        if (Unknown13.Length != 0) hash ^= Unknown13.GetHashCode();
        hash ^= currency_.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (CreationTime != 0L) {
          output.WriteRawTag(8);
          output.WriteInt64(CreationTime);
        }
        if (Username.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Username);
        }
        if (Team != 0) {
          output.WriteRawTag(40);
          output.WriteInt32(Team);
        }
        if (Tutorial.Length != 0) {
          output.WriteRawTag(58);
          output.WriteBytes(Tutorial);
        }
        if (avatar_ != null) {
          output.WriteRawTag(66);
          output.WriteMessage(Avatar);
        }
        if (PokeStorage != 0) {
          output.WriteRawTag(72);
          output.WriteInt32(PokeStorage);
        }
        if (ItemStorage != 0) {
          output.WriteRawTag(80);
          output.WriteInt32(ItemStorage);
        }
        if (Unknown11.Length != 0) {
          output.WriteRawTag(90);
          output.WriteString(Unknown11);
        }
        if (Unknown12.Length != 0) {
          output.WriteRawTag(98);
          output.WriteString(Unknown12);
        }
        if (Unknown13.Length != 0) {
          output.WriteRawTag(106);
          output.WriteString(Unknown13);
        }
        currency_.WriteTo(output, _repeated_currency_codec);
      }

      public int CalculateSize() {
        int size = 0;
        if (CreationTime != 0L) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTime);
        }
        if (Username.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
        }
        if (Team != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
        }
        if (Tutorial.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(Tutorial);
        }
        if (avatar_ != null) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
        }
        if (PokeStorage != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokeStorage);
        }
        if (ItemStorage != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemStorage);
        }
        if (Unknown11.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Unknown11);
        }
        if (Unknown12.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Unknown12);
        }
        if (Unknown13.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Unknown13);
        }
        size += currency_.CalculateSize(_repeated_currency_codec);
        return size;
      }

      public void MergeFrom(Profile other) {
        if (other == null) {
          return;
        }
        if (other.CreationTime != 0L) {
          CreationTime = other.CreationTime;
        }
        if (other.Username.Length != 0) {
          Username = other.Username;
        }
        if (other.Team != 0) {
          Team = other.Team;
        }
        if (other.Tutorial.Length != 0) {
          Tutorial = other.Tutorial;
        }
        if (other.avatar_ != null) {
          if (avatar_ == null) {
            avatar_ = new global::ResponseEnvelop.Types.Profile.Types.AvatarDetails();
          }
          Avatar.MergeFrom(other.Avatar);
        }
        if (other.PokeStorage != 0) {
          PokeStorage = other.PokeStorage;
        }
        if (other.ItemStorage != 0) {
          ItemStorage = other.ItemStorage;
        }
        if (other.Unknown11.Length != 0) {
          Unknown11 = other.Unknown11;
        }
        if (other.Unknown12.Length != 0) {
          Unknown12 = other.Unknown12;
        }
        if (other.Unknown13.Length != 0) {
          Unknown13 = other.Unknown13;
        }
        currency_.Add(other.currency_);
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              CreationTime = input.ReadInt64();
              break;
            }
            case 18: {
              Username = input.ReadString();
              break;
            }
            case 40: {
              Team = input.ReadInt32();
              break;
            }
            case 58: {
              Tutorial = input.ReadBytes();
              break;
            }
            case 66: {
              if (avatar_ == null) {
                avatar_ = new global::ResponseEnvelop.Types.Profile.Types.AvatarDetails();
              }
              input.ReadMessage(avatar_);
              break;
            }
            case 72: {
              PokeStorage = input.ReadInt32();
              break;
            }
            case 80: {
              ItemStorage = input.ReadInt32();
              break;
            }
            case 90: {
              Unknown11 = input.ReadString();
              break;
            }
            case 98: {
              Unknown12 = input.ReadString();
              break;
            }
            case 106: {
              Unknown13 = input.ReadString();
              break;
            }
            case 114: {
              currency_.AddEntriesFrom(input, _repeated_currency_codec);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Profile message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class AvatarDetails : pb::IMessage<AvatarDetails> {
          private static readonly pb::MessageParser<AvatarDetails> _parser = new pb::MessageParser<AvatarDetails>(() => new AvatarDetails());
          public static pb::MessageParser<AvatarDetails> Parser { get { return _parser; } }

          public static pbr::MessageDescriptor Descriptor {
            get { return global::ResponseEnvelop.Types.Profile.Descriptor.NestedTypes[0]; }
          }

          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          public AvatarDetails() {
            OnConstruction();
          }

          partial void OnConstruction();

          public AvatarDetails(AvatarDetails other) : this() {
            unknown2_ = other.unknown2_;
            unknown3_ = other.unknown3_;
            unknown9_ = other.unknown9_;
            unknown10_ = other.unknown10_;
          }

          public AvatarDetails Clone() {
            return new AvatarDetails(this);
          }

          /// <summary>Field number for the "unknown2" field.</summary>
          public const int Unknown2FieldNumber = 2;
          private int unknown2_;
          public int Unknown2 {
            get { return unknown2_; }
            set {
              unknown2_ = value;
            }
          }

          /// <summary>Field number for the "unknown3" field.</summary>
          public const int Unknown3FieldNumber = 3;
          private int unknown3_;
          public int Unknown3 {
            get { return unknown3_; }
            set {
              unknown3_ = value;
            }
          }

          /// <summary>Field number for the "unknown9" field.</summary>
          public const int Unknown9FieldNumber = 9;
          private int unknown9_;
          public int Unknown9 {
            get { return unknown9_; }
            set {
              unknown9_ = value;
            }
          }

          /// <summary>Field number for the "unknown10" field.</summary>
          public const int Unknown10FieldNumber = 10;
          private int unknown10_;
          public int Unknown10 {
            get { return unknown10_; }
            set {
              unknown10_ = value;
            }
          }

          public override bool Equals(object other) {
            return Equals(other as AvatarDetails);
          }

          public bool Equals(AvatarDetails other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Unknown2 != other.Unknown2) return false;
            if (Unknown3 != other.Unknown3) return false;
            if (Unknown9 != other.Unknown9) return false;
            if (Unknown10 != other.Unknown10) return false;
            return true;
          }

          public override int GetHashCode() {
            int hash = 1;
            if (Unknown2 != 0) hash ^= Unknown2.GetHashCode();
            if (Unknown3 != 0) hash ^= Unknown3.GetHashCode();
            if (Unknown9 != 0) hash ^= Unknown9.GetHashCode();
            if (Unknown10 != 0) hash ^= Unknown10.GetHashCode();
            return hash;
          }

          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          public void WriteTo(pb::CodedOutputStream output) {
            if (Unknown2 != 0) {
              output.WriteRawTag(16);
              output.WriteInt32(Unknown2);
            }
            if (Unknown3 != 0) {
              output.WriteRawTag(24);
              output.WriteInt32(Unknown3);
            }
            if (Unknown9 != 0) {
              output.WriteRawTag(72);
              output.WriteInt32(Unknown9);
            }
            if (Unknown10 != 0) {
              output.WriteRawTag(80);
              output.WriteInt32(Unknown10);
            }
          }

          public int CalculateSize() {
            int size = 0;
            if (Unknown2 != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown2);
            }
            if (Unknown3 != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown3);
            }
            if (Unknown9 != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown9);
            }
            if (Unknown10 != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unknown10);
            }
            return size;
          }

          public void MergeFrom(AvatarDetails other) {
            if (other == null) {
              return;
            }
            if (other.Unknown2 != 0) {
              Unknown2 = other.Unknown2;
            }
            if (other.Unknown3 != 0) {
              Unknown3 = other.Unknown3;
            }
            if (other.Unknown9 != 0) {
              Unknown9 = other.Unknown9;
            }
            if (other.Unknown10 != 0) {
              Unknown10 = other.Unknown10;
            }
          }

          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 16: {
                  Unknown2 = input.ReadInt32();
                  break;
                }
                case 24: {
                  Unknown3 = input.ReadInt32();
                  break;
                }
                case 72: {
                  Unknown9 = input.ReadInt32();
                  break;
                }
                case 80: {
                  Unknown10 = input.ReadInt32();
                  break;
                }
              }
            }
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Currency : pb::IMessage<Currency> {
          private static readonly pb::MessageParser<Currency> _parser = new pb::MessageParser<Currency>(() => new Currency());
          public static pb::MessageParser<Currency> Parser { get { return _parser; } }

          public static pbr::MessageDescriptor Descriptor {
            get { return global::ResponseEnvelop.Types.Profile.Descriptor.NestedTypes[1]; }
          }

          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          public Currency() {
            OnConstruction();
          }

          partial void OnConstruction();

          public Currency(Currency other) : this() {
            type_ = other.type_;
            amount_ = other.amount_;
          }

          public Currency Clone() {
            return new Currency(this);
          }

          /// <summary>Field number for the "type" field.</summary>
          public const int TypeFieldNumber = 1;
          private string type_ = "";
          public string Type {
            get { return type_; }
            set {
              type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }

          /// <summary>Field number for the "amount" field.</summary>
          public const int AmountFieldNumber = 2;
          private int amount_;
          public int Amount {
            get { return amount_; }
            set {
              amount_ = value;
            }
          }

          public override bool Equals(object other) {
            return Equals(other as Currency);
          }

          public bool Equals(Currency other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Type != other.Type) return false;
            if (Amount != other.Amount) return false;
            return true;
          }

          public override int GetHashCode() {
            int hash = 1;
            if (Type.Length != 0) hash ^= Type.GetHashCode();
            if (Amount != 0) hash ^= Amount.GetHashCode();
            return hash;
          }

          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          public void WriteTo(pb::CodedOutputStream output) {
            if (Type.Length != 0) {
              output.WriteRawTag(10);
              output.WriteString(Type);
            }
            if (Amount != 0) {
              output.WriteRawTag(16);
              output.WriteInt32(Amount);
            }
          }

          public int CalculateSize() {
            int size = 0;
            if (Type.Length != 0) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
            }
            if (Amount != 0) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
            }
            return size;
          }

          public void MergeFrom(Currency other) {
            if (other == null) {
              return;
            }
            if (other.Type.Length != 0) {
              Type = other.Type;
            }
            if (other.Amount != 0) {
              Amount = other.Amount;
            }
          }

          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  input.SkipLastField();
                  break;
                case 10: {
                  Type = input.ReadString();
                  break;
                }
                case 16: {
                  Amount = input.ReadInt32();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
